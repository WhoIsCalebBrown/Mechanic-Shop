//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

// @ts-nocheck
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AppointmentsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getAppointments(): Promise<Appointment[]> {
        let url_ = this.baseUrl + "/api/Appointments";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppointments(_response);
        });
    }

    protected processGetAppointments(response: Response): Promise<Appointment[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Appointment.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Appointment[]>(null as any);
    }

    createAppointment(dto: CreateAppointmentDto): Promise<Appointment> {
        let url_ = this.baseUrl + "/api/Appointments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateAppointment(_response);
        });
    }

    protected processCreateAppointment(response: Response): Promise<Appointment> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Appointment.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Appointment>(null as any);
    }

    getAppointment(id: number): Promise<Appointment> {
        let url_ = this.baseUrl + "/api/Appointments/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppointment(_response);
        });
    }

    protected processGetAppointment(response: Response): Promise<Appointment> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Appointment.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Appointment>(null as any);
    }

    updateAppointment(id: number, dto: UpdateAppointmentDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Appointments/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAppointment(_response);
        });
    }

    protected processUpdateAppointment(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    deleteAppointment(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Appointments/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAppointment(_response);
        });
    }

    protected processDeleteAppointment(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getUpcomingAppointments(): Promise<Appointment[]> {
        let url_ = this.baseUrl + "/api/Appointments/upcoming";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUpcomingAppointments(_response);
        });
    }

    protected processGetUpcomingAppointments(response: Response): Promise<Appointment[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Appointment.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Appointment[]>(null as any);
    }

    getAppointmentsByCustomer(customerId: number): Promise<Appointment[]> {
        let url_ = this.baseUrl + "/api/Appointments/customer/{customerId}";
        if (customerId === undefined || customerId === null)
            throw new globalThis.Error("The parameter 'customerId' must be defined.");
        url_ = url_.replace("{customerId}", encodeURIComponent("" + customerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppointmentsByCustomer(_response);
        });
    }

    protected processGetAppointmentsByCustomer(response: Response): Promise<Appointment[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Appointment.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Appointment[]>(null as any);
    }

    updateAppointmentStatus(id: number, status: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Appointments/{id}/status";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(status);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAppointmentStatus(_response);
        });
    }

    protected processUpdateAppointmentStatus(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class AuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    register(request: RegisterRequest): Promise<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<AuthResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponse>(null as any);
    }

    login(request: LoginRequest): Promise<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<AuthResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponse>(null as any);
    }

    refresh(): Promise<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth/refresh";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: Response): Promise<AuthResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponse>(null as any);
    }

    logout(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getCurrentUser(): Promise<UserInfo> {
        let url_ = this.baseUrl + "/api/Auth/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<UserInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfo>(null as any);
    }
}

export class BookingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getBookingPage(slug: string): Promise<PublicBookingPageResponse> {
        let url_ = this.baseUrl + "/api/book/{slug}";
        if (slug === undefined || slug === null)
            throw new globalThis.Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingPage(_response);
        });
    }

    protected processGetBookingPage(response: Response): Promise<PublicBookingPageResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PublicBookingPageResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PublicBookingPageResponse>(null as any);
    }

    getBookingPageV2(slug: string): Promise<PublicBookingPageDto> {
        let url_ = this.baseUrl + "/api/book/{slug}/v2";
        if (slug === undefined || slug === null)
            throw new globalThis.Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingPageV2(_response);
        });
    }

    protected processGetBookingPageV2(response: Response): Promise<PublicBookingPageDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PublicBookingPageDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PublicBookingPageDto>(null as any);
    }

    getCalendarMonth(slug: string, year: number, month: number, serviceId: number | null | undefined): Promise<CalendarMonthDto> {
        let url_ = this.baseUrl + "/api/book/{slug}/calendar/{year}/{month}?";
        if (slug === undefined || slug === null)
            throw new globalThis.Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        if (year === undefined || year === null)
            throw new globalThis.Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (month === undefined || month === null)
            throw new globalThis.Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        if (serviceId !== undefined && serviceId !== null)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCalendarMonth(_response);
        });
    }

    protected processGetCalendarMonth(response: Response): Promise<CalendarMonthDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CalendarMonthDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CalendarMonthDto>(null as any);
    }

    getQRCode(slug: string, size: number | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/book/{slug}/qr?";
        if (slug === undefined || slug === null)
            throw new globalThis.Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        if (size !== undefined && size !== null)
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetQRCode(_response);
        });
    }

    protected processGetQRCode(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getAvailableTimeSlots(slug: string, date: Date | undefined, serviceId: number | undefined): Promise<AvailableTimeSlotsResponse> {
        let url_ = this.baseUrl + "/api/book/{slug}/availability?";
        if (slug === undefined || slug === null)
            throw new globalThis.Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));
        if (date === null)
            throw new globalThis.Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        if (serviceId === null)
            throw new globalThis.Error("The parameter 'serviceId' cannot be null.");
        else if (serviceId !== undefined)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAvailableTimeSlots(_response);
        });
    }

    protected processGetAvailableTimeSlots(response: Response): Promise<AvailableTimeSlotsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AvailableTimeSlotsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AvailableTimeSlotsResponse>(null as any);
    }
}

export class CustomersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getCustomers(): Promise<Customer[]> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomers(_response);
        });
    }

    protected processGetCustomers(response: Response): Promise<Customer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Customer.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Customer[]>(null as any);
    }

    createCustomer(dto: CreateCustomerDto): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCustomer(_response);
        });
    }

    protected processCreateCustomer(response: Response): Promise<Customer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Customer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Customer>(null as any);
    }

    getCustomer(id: number): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomer(_response);
        });
    }

    protected processGetCustomer(response: Response): Promise<Customer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Customer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Customer>(null as any);
    }

    updateCustomer(id: number, dto: UpdateCustomerDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCustomer(_response);
        });
    }

    protected processUpdateCustomer(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    deleteCustomer(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCustomer(_response);
        });
    }

    protected processDeleteCustomer(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class OnboardingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getStatus(): Promise<OnboardingStatusResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStatus(_response);
        });
    }

    protected processGetStatus(response: Response): Promise<OnboardingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OnboardingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OnboardingStatusResponse>(null as any);
    }

    checkSlug(request: SlugCheckRequest): Promise<SlugCheckResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/check-slug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckSlug(_response);
        });
    }

    protected processCheckSlug(response: Response): Promise<SlugCheckResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SlugCheckResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SlugCheckResponse>(null as any);
    }

    suggestSlug(businessName: string | undefined): Promise<SlugCheckResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/suggest-slug?";
        if (businessName === null)
            throw new globalThis.Error("The parameter 'businessName' cannot be null.");
        else if (businessName !== undefined)
            url_ += "businessName=" + encodeURIComponent("" + businessName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSuggestSlug(_response);
        });
    }

    protected processSuggestSlug(response: Response): Promise<SlugCheckResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SlugCheckResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SlugCheckResponse>(null as any);
    }

    step1(request: OnboardingStep1Request): Promise<OnboardingStatusResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/step1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStep1(_response);
        });
    }

    protected processStep1(response: Response): Promise<OnboardingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OnboardingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OnboardingStatusResponse>(null as any);
    }

    step2(request: OnboardingStep2Request): Promise<OnboardingStatusResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/step2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStep2(_response);
        });
    }

    protected processStep2(response: Response): Promise<OnboardingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OnboardingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OnboardingStatusResponse>(null as any);
    }

    step3(request: OnboardingStep3Request): Promise<OnboardingStatusResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/step3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStep3(_response);
        });
    }

    protected processStep3(response: Response): Promise<OnboardingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OnboardingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OnboardingStatusResponse>(null as any);
    }

    completeOnboarding(request: CompleteOnboardingRequest): Promise<OnboardingStatusResponse> {
        let url_ = this.baseUrl + "/api/Onboarding/complete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompleteOnboarding(_response);
        });
    }

    protected processCompleteOnboarding(response: Response): Promise<OnboardingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OnboardingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OnboardingStatusResponse>(null as any);
    }
}

export class ServiceRecordsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getServiceRecords(): Promise<ServiceRecord[]> {
        let url_ = this.baseUrl + "/api/ServiceRecords";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetServiceRecords(_response);
        });
    }

    protected processGetServiceRecords(response: Response): Promise<ServiceRecord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServiceRecord.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceRecord[]>(null as any);
    }

    createServiceRecord(dto: CreateServiceRecordDto): Promise<ServiceRecord> {
        let url_ = this.baseUrl + "/api/ServiceRecords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateServiceRecord(_response);
        });
    }

    protected processCreateServiceRecord(response: Response): Promise<ServiceRecord> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceRecord.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceRecord>(null as any);
    }

    getServiceRecord(id: number): Promise<ServiceRecord> {
        let url_ = this.baseUrl + "/api/ServiceRecords/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetServiceRecord(_response);
        });
    }

    protected processGetServiceRecord(response: Response): Promise<ServiceRecord> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceRecord.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceRecord>(null as any);
    }

    updateServiceRecord(id: number, dto: UpdateServiceRecordDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ServiceRecords/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateServiceRecord(_response);
        });
    }

    protected processUpdateServiceRecord(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    deleteServiceRecord(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ServiceRecords/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteServiceRecord(_response);
        });
    }

    protected processDeleteServiceRecord(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getServiceRecordsByVehicle(vehicleId: number): Promise<ServiceRecord[]> {
        let url_ = this.baseUrl + "/api/ServiceRecords/vehicle/{vehicleId}";
        if (vehicleId === undefined || vehicleId === null)
            throw new globalThis.Error("The parameter 'vehicleId' must be defined.");
        url_ = url_.replace("{vehicleId}", encodeURIComponent("" + vehicleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetServiceRecordsByVehicle(_response);
        });
    }

    protected processGetServiceRecordsByVehicle(response: Response): Promise<ServiceRecord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServiceRecord.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceRecord[]>(null as any);
    }
}

export class SiteSettingsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getSiteSettings(): Promise<SiteSettingsDto> {
        let url_ = this.baseUrl + "/api/SiteSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSiteSettings(_response);
        });
    }

    protected processGetSiteSettings(response: Response): Promise<SiteSettingsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSettingsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SiteSettingsDto>(null as any);
    }

    updateSiteSettings(updateDto: UpdateSiteSettingsDto): Promise<SiteSettingsDto> {
        let url_ = this.baseUrl + "/api/SiteSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSiteSettings(_response);
        });
    }

    protected processUpdateSiteSettings(response: Response): Promise<SiteSettingsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSettingsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SiteSettingsDto>(null as any);
    }
}

export class TenantSettingsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getTenantSettings(): Promise<TenantSettingsDto> {
        let url_ = this.baseUrl + "/api/TenantSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTenantSettings(_response);
        });
    }

    protected processGetTenantSettings(response: Response): Promise<TenantSettingsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantSettingsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TenantSettingsDto>(null as any);
    }

    updateTenantSettings(updateDto: UpdateTenantSettingsDto): Promise<TenantSettingsDto> {
        let url_ = this.baseUrl + "/api/TenantSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTenantSettings(_response);
        });
    }

    protected processUpdateTenantSettings(response: Response): Promise<TenantSettingsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TenantSettingsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TenantSettingsDto>(null as any);
    }
}

export class VehiclesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    getVehicles(): Promise<Vehicle[]> {
        let url_ = this.baseUrl + "/api/Vehicles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicles(_response);
        });
    }

    protected processGetVehicles(response: Response): Promise<Vehicle[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Vehicle.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vehicle[]>(null as any);
    }

    createVehicle(dto: CreateVehicleDto): Promise<Vehicle> {
        let url_ = this.baseUrl + "/api/Vehicles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateVehicle(_response);
        });
    }

    protected processCreateVehicle(response: Response): Promise<Vehicle> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Vehicle.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vehicle>(null as any);
    }

    getVehicle(id: number): Promise<Vehicle> {
        let url_ = this.baseUrl + "/api/Vehicles/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehicle(_response);
        });
    }

    protected processGetVehicle(response: Response): Promise<Vehicle> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Vehicle.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vehicle>(null as any);
    }

    updateVehicle(id: number, dto: UpdateVehicleDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Vehicles/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateVehicle(_response);
        });
    }

    protected processUpdateVehicle(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    deleteVehicle(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Vehicles/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteVehicle(_response);
        });
    }

    protected processDeleteVehicle(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getVehiclesByCustomer(customerId: number): Promise<Vehicle[]> {
        let url_ = this.baseUrl + "/api/Vehicles/customer/{customerId}";
        if (customerId === undefined || customerId === null)
            throw new globalThis.Error("The parameter 'customerId' must be defined.");
        url_ = url_.replace("{customerId}", encodeURIComponent("" + customerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVehiclesByCustomer(_response);
        });
    }

    protected processGetVehiclesByCustomer(response: Response): Promise<Vehicle[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Vehicle.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vehicle[]>(null as any);
    }
}

export class Appointment implements IAppointment {
    id?: number;
    tenantId?: number;
    customerId?: number;
    vehicleId?: number;
    assignedStaffId?: number | undefined;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;
    createdAt?: Date;
    completedAt?: Date | undefined;
    tenant?: Tenant;
    customer?: Customer;
    vehicle?: Vehicle;
    assignedStaff?: Staff | undefined;
    repairOrders?: RepairOrder[];

    constructor(data?: IAppointment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.customerId = _data["customerId"];
            this.vehicleId = _data["vehicleId"];
            this.assignedStaffId = _data["assignedStaffId"];
            this.scheduledDate = _data["scheduledDate"] ? new Date(_data["scheduledDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.notes = _data["notes"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined as any;
            this.vehicle = _data["vehicle"] ? Vehicle.fromJS(_data["vehicle"]) : undefined as any;
            this.assignedStaff = _data["assignedStaff"] ? Staff.fromJS(_data["assignedStaff"]) : undefined as any;
            if (Array.isArray(_data["repairOrders"])) {
                this.repairOrders = [] as any;
                for (let item of _data["repairOrders"])
                    this.repairOrders!.push(RepairOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Appointment {
        data = typeof data === 'object' ? data : {};
        let result = new Appointment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["customerId"] = this.customerId;
        data["vehicleId"] = this.vehicleId;
        data["assignedStaffId"] = this.assignedStaffId;
        data["scheduledDate"] = this.scheduledDate ? this.scheduledDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["status"] = this.status;
        data["notes"] = this.notes;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined as any;
        data["vehicle"] = this.vehicle ? this.vehicle.toJSON() : undefined as any;
        data["assignedStaff"] = this.assignedStaff ? this.assignedStaff.toJSON() : undefined as any;
        if (Array.isArray(this.repairOrders)) {
            data["repairOrders"] = [];
            for (let item of this.repairOrders)
                data["repairOrders"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAppointment {
    id?: number;
    tenantId?: number;
    customerId?: number;
    vehicleId?: number;
    assignedStaffId?: number | undefined;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;
    createdAt?: Date;
    completedAt?: Date | undefined;
    tenant?: Tenant;
    customer?: Customer;
    vehicle?: Vehicle;
    assignedStaff?: Staff | undefined;
    repairOrders?: RepairOrder[];
}

export enum AppointmentStatus {
    Scheduled = "Scheduled",
    InProgress = "InProgress",
    Completed = "Completed",
    Cancelled = "Cancelled",
    NoShow = "NoShow",
}

export class Tenant implements ITenant {
    id?: number;
    slug?: string;
    name?: string;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    logoUrl?: string | undefined;
    description?: string | undefined;
    timeZone?: string;
    plan?: TenantPlan;
    status?: TenantStatus;
    trialEndsAt?: Date | undefined;
    subscriptionEndsAt?: Date | undefined;
    onboardingCompleted?: boolean;
    onboardingCompletedAt?: Date | undefined;
    onboardingStep?: number;
    availabilityRules?: string | undefined;
    bookingEnabled?: boolean;
    integrationSettings?: string | undefined;
    mediaStoragePath?: string | undefined;
    storageUsedBytes?: number;
    storageLimitBytes?: number;
    maxUsers?: number;
    maxCustomers?: number;
    maxVehicles?: number;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    createdBy?: string | undefined;
    customers?: Customer[];
    vehicles?: Vehicle[];
    appointments?: Appointment[];
    serviceRecords?: ServiceRecord[];
    staff?: Staff[];
    repairOrders?: RepairOrder[];
    serviceItems?: ServiceItem[];

    constructor(data?: ITenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.slug = _data["slug"];
            this.name = _data["name"];
            this.businessAddress = _data["businessAddress"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.logoUrl = _data["logoUrl"];
            this.description = _data["description"];
            this.timeZone = _data["timeZone"];
            this.plan = _data["plan"];
            this.status = _data["status"];
            this.trialEndsAt = _data["trialEndsAt"] ? new Date(_data["trialEndsAt"].toString()) : undefined as any;
            this.subscriptionEndsAt = _data["subscriptionEndsAt"] ? new Date(_data["subscriptionEndsAt"].toString()) : undefined as any;
            this.onboardingCompleted = _data["onboardingCompleted"];
            this.onboardingCompletedAt = _data["onboardingCompletedAt"] ? new Date(_data["onboardingCompletedAt"].toString()) : undefined as any;
            this.onboardingStep = _data["onboardingStep"];
            this.availabilityRules = _data["availabilityRules"];
            this.bookingEnabled = _data["bookingEnabled"];
            this.integrationSettings = _data["integrationSettings"];
            this.mediaStoragePath = _data["mediaStoragePath"];
            this.storageUsedBytes = _data["storageUsedBytes"];
            this.storageLimitBytes = _data["storageLimitBytes"];
            this.maxUsers = _data["maxUsers"];
            this.maxCustomers = _data["maxCustomers"];
            this.maxVehicles = _data["maxVehicles"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
            this.createdBy = _data["createdBy"];
            if (Array.isArray(_data["customers"])) {
                this.customers = [] as any;
                for (let item of _data["customers"])
                    this.customers!.push(Customer.fromJS(item));
            }
            if (Array.isArray(_data["vehicles"])) {
                this.vehicles = [] as any;
                for (let item of _data["vehicles"])
                    this.vehicles!.push(Vehicle.fromJS(item));
            }
            if (Array.isArray(_data["appointments"])) {
                this.appointments = [] as any;
                for (let item of _data["appointments"])
                    this.appointments!.push(Appointment.fromJS(item));
            }
            if (Array.isArray(_data["serviceRecords"])) {
                this.serviceRecords = [] as any;
                for (let item of _data["serviceRecords"])
                    this.serviceRecords!.push(ServiceRecord.fromJS(item));
            }
            if (Array.isArray(_data["staff"])) {
                this.staff = [] as any;
                for (let item of _data["staff"])
                    this.staff!.push(Staff.fromJS(item));
            }
            if (Array.isArray(_data["repairOrders"])) {
                this.repairOrders = [] as any;
                for (let item of _data["repairOrders"])
                    this.repairOrders!.push(RepairOrder.fromJS(item));
            }
            if (Array.isArray(_data["serviceItems"])) {
                this.serviceItems = [] as any;
                for (let item of _data["serviceItems"])
                    this.serviceItems!.push(ServiceItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Tenant {
        data = typeof data === 'object' ? data : {};
        let result = new Tenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["slug"] = this.slug;
        data["name"] = this.name;
        data["businessAddress"] = this.businessAddress;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["website"] = this.website;
        data["logoUrl"] = this.logoUrl;
        data["description"] = this.description;
        data["timeZone"] = this.timeZone;
        data["plan"] = this.plan;
        data["status"] = this.status;
        data["trialEndsAt"] = this.trialEndsAt ? this.trialEndsAt.toISOString() : undefined as any;
        data["subscriptionEndsAt"] = this.subscriptionEndsAt ? this.subscriptionEndsAt.toISOString() : undefined as any;
        data["onboardingCompleted"] = this.onboardingCompleted;
        data["onboardingCompletedAt"] = this.onboardingCompletedAt ? this.onboardingCompletedAt.toISOString() : undefined as any;
        data["onboardingStep"] = this.onboardingStep;
        data["availabilityRules"] = this.availabilityRules;
        data["bookingEnabled"] = this.bookingEnabled;
        data["integrationSettings"] = this.integrationSettings;
        data["mediaStoragePath"] = this.mediaStoragePath;
        data["storageUsedBytes"] = this.storageUsedBytes;
        data["storageLimitBytes"] = this.storageLimitBytes;
        data["maxUsers"] = this.maxUsers;
        data["maxCustomers"] = this.maxCustomers;
        data["maxVehicles"] = this.maxVehicles;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        data["createdBy"] = this.createdBy;
        if (Array.isArray(this.customers)) {
            data["customers"] = [];
            for (let item of this.customers)
                data["customers"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.vehicles)) {
            data["vehicles"] = [];
            for (let item of this.vehicles)
                data["vehicles"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.appointments)) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.serviceRecords)) {
            data["serviceRecords"] = [];
            for (let item of this.serviceRecords)
                data["serviceRecords"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.staff)) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.repairOrders)) {
            data["repairOrders"] = [];
            for (let item of this.repairOrders)
                data["repairOrders"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.serviceItems)) {
            data["serviceItems"] = [];
            for (let item of this.serviceItems)
                data["serviceItems"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITenant {
    id?: number;
    slug?: string;
    name?: string;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    logoUrl?: string | undefined;
    description?: string | undefined;
    timeZone?: string;
    plan?: TenantPlan;
    status?: TenantStatus;
    trialEndsAt?: Date | undefined;
    subscriptionEndsAt?: Date | undefined;
    onboardingCompleted?: boolean;
    onboardingCompletedAt?: Date | undefined;
    onboardingStep?: number;
    availabilityRules?: string | undefined;
    bookingEnabled?: boolean;
    integrationSettings?: string | undefined;
    mediaStoragePath?: string | undefined;
    storageUsedBytes?: number;
    storageLimitBytes?: number;
    maxUsers?: number;
    maxCustomers?: number;
    maxVehicles?: number;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    createdBy?: string | undefined;
    customers?: Customer[];
    vehicles?: Vehicle[];
    appointments?: Appointment[];
    serviceRecords?: ServiceRecord[];
    staff?: Staff[];
    repairOrders?: RepairOrder[];
    serviceItems?: ServiceItem[];
}

export enum TenantPlan {
    Free = "Free",
    Basic = "Basic",
    Professional = "Professional",
    Enterprise = "Enterprise",
}

export enum TenantStatus {
    Active = "Active",
    Trial = "Trial",
    Suspended = "Suspended",
    Cancelled = "Cancelled",
    Expired = "Expired",
}

export class Customer implements ICustomer {
    id?: number;
    tenantId?: number;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    vehicles?: Vehicle[];
    appointments?: Appointment[];

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            if (Array.isArray(_data["vehicles"])) {
                this.vehicles = [] as any;
                for (let item of _data["vehicles"])
                    this.vehicles!.push(Vehicle.fromJS(item));
            }
            if (Array.isArray(_data["appointments"])) {
                this.appointments = [] as any;
                for (let item of _data["appointments"])
                    this.appointments!.push(Appointment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        if (Array.isArray(this.vehicles)) {
            data["vehicles"] = [];
            for (let item of this.vehicles)
                data["vehicles"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.appointments)) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICustomer {
    id?: number;
    tenantId?: number;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    vehicles?: Vehicle[];
    appointments?: Appointment[];
}

export class Vehicle implements IVehicle {
    id?: number;
    tenantId?: number;
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    customer?: Customer;
    appointments?: Appointment[];
    serviceRecords?: ServiceRecord[];

    constructor(data?: IVehicle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.customerId = _data["customerId"];
            this.make = _data["make"];
            this.model = _data["model"];
            this.year = _data["year"];
            this.vin = _data["vin"];
            this.licensePlate = _data["licensePlate"];
            this.color = _data["color"];
            this.mileage = _data["mileage"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined as any;
            if (Array.isArray(_data["appointments"])) {
                this.appointments = [] as any;
                for (let item of _data["appointments"])
                    this.appointments!.push(Appointment.fromJS(item));
            }
            if (Array.isArray(_data["serviceRecords"])) {
                this.serviceRecords = [] as any;
                for (let item of _data["serviceRecords"])
                    this.serviceRecords!.push(ServiceRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Vehicle {
        data = typeof data === 'object' ? data : {};
        let result = new Vehicle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["customerId"] = this.customerId;
        data["make"] = this.make;
        data["model"] = this.model;
        data["year"] = this.year;
        data["vin"] = this.vin;
        data["licensePlate"] = this.licensePlate;
        data["color"] = this.color;
        data["mileage"] = this.mileage;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined as any;
        if (Array.isArray(this.appointments)) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.serviceRecords)) {
            data["serviceRecords"] = [];
            for (let item of this.serviceRecords)
                data["serviceRecords"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IVehicle {
    id?: number;
    tenantId?: number;
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    customer?: Customer;
    appointments?: Appointment[];
    serviceRecords?: ServiceRecord[];
}

export class ServiceRecord implements IServiceRecord {
    id?: number;
    tenantId?: number;
    vehicleId?: number;
    repairOrderId?: number | undefined;
    performedByStaffId?: number | undefined;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    totalCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    vehicle?: Vehicle;
    repairOrder?: RepairOrder | undefined;
    performedByStaff?: Staff | undefined;

    constructor(data?: IServiceRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.vehicleId = _data["vehicleId"];
            this.repairOrderId = _data["repairOrderId"];
            this.performedByStaffId = _data["performedByStaffId"];
            this.serviceDate = _data["serviceDate"] ? new Date(_data["serviceDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.laborCost = _data["laborCost"];
            this.partsCost = _data["partsCost"];
            this.totalCost = _data["totalCost"];
            this.mileageAtService = _data["mileageAtService"];
            this.technicianName = _data["technicianName"];
            this.notes = _data["notes"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            this.vehicle = _data["vehicle"] ? Vehicle.fromJS(_data["vehicle"]) : undefined as any;
            this.repairOrder = _data["repairOrder"] ? RepairOrder.fromJS(_data["repairOrder"]) : undefined as any;
            this.performedByStaff = _data["performedByStaff"] ? Staff.fromJS(_data["performedByStaff"]) : undefined as any;
        }
    }

    static fromJS(data: any): ServiceRecord {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["vehicleId"] = this.vehicleId;
        data["repairOrderId"] = this.repairOrderId;
        data["performedByStaffId"] = this.performedByStaffId;
        data["serviceDate"] = this.serviceDate ? this.serviceDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["laborCost"] = this.laborCost;
        data["partsCost"] = this.partsCost;
        data["totalCost"] = this.totalCost;
        data["mileageAtService"] = this.mileageAtService;
        data["technicianName"] = this.technicianName;
        data["notes"] = this.notes;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        data["vehicle"] = this.vehicle ? this.vehicle.toJSON() : undefined as any;
        data["repairOrder"] = this.repairOrder ? this.repairOrder.toJSON() : undefined as any;
        data["performedByStaff"] = this.performedByStaff ? this.performedByStaff.toJSON() : undefined as any;
        return data;
    }
}

export interface IServiceRecord {
    id?: number;
    tenantId?: number;
    vehicleId?: number;
    repairOrderId?: number | undefined;
    performedByStaffId?: number | undefined;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    totalCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;
    createdAt?: Date;
    tenant?: Tenant;
    vehicle?: Vehicle;
    repairOrder?: RepairOrder | undefined;
    performedByStaff?: Staff | undefined;
}

export class RepairOrder implements IRepairOrder {
    id?: number;
    tenantId?: number;
    vehicleId?: number;
    customerId?: number;
    appointmentId?: number | undefined;
    assignedTechnicianId?: number | undefined;
    orderNumber?: string;
    description?: string;
    status?: RepairOrderStatus;
    priority?: RepairOrderPriority;
    createdAt?: Date;
    scheduledStartDate?: Date | undefined;
    actualStartDate?: Date | undefined;
    estimatedCompletionDate?: Date | undefined;
    actualCompletionDate?: Date | undefined;
    estimatedLaborCost?: number;
    estimatedPartsCost?: number;
    actualLaborCost?: number;
    actualPartsCost?: number;
    estimatedTotalCost?: number;
    actualTotalCost?: number;
    estimatedLaborHours?: number | undefined;
    actualLaborHours?: number | undefined;
    mileageIn?: number | undefined;
    mileageOut?: number | undefined;
    customerNotes?: string | undefined;
    technicianNotes?: string | undefined;
    internalNotes?: string | undefined;
    customerApproved?: boolean;
    customerApprovedAt?: Date | undefined;
    customerSignature?: string | undefined;
    tenant?: Tenant;
    vehicle?: Vehicle;
    customer?: Customer;
    appointment?: Appointment | undefined;
    assignedTechnician?: Staff | undefined;
    serviceRecords?: ServiceRecord[];

    constructor(data?: IRepairOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.vehicleId = _data["vehicleId"];
            this.customerId = _data["customerId"];
            this.appointmentId = _data["appointmentId"];
            this.assignedTechnicianId = _data["assignedTechnicianId"];
            this.orderNumber = _data["orderNumber"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.priority = _data["priority"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.scheduledStartDate = _data["scheduledStartDate"] ? new Date(_data["scheduledStartDate"].toString()) : undefined as any;
            this.actualStartDate = _data["actualStartDate"] ? new Date(_data["actualStartDate"].toString()) : undefined as any;
            this.estimatedCompletionDate = _data["estimatedCompletionDate"] ? new Date(_data["estimatedCompletionDate"].toString()) : undefined as any;
            this.actualCompletionDate = _data["actualCompletionDate"] ? new Date(_data["actualCompletionDate"].toString()) : undefined as any;
            this.estimatedLaborCost = _data["estimatedLaborCost"];
            this.estimatedPartsCost = _data["estimatedPartsCost"];
            this.actualLaborCost = _data["actualLaborCost"];
            this.actualPartsCost = _data["actualPartsCost"];
            this.estimatedTotalCost = _data["estimatedTotalCost"];
            this.actualTotalCost = _data["actualTotalCost"];
            this.estimatedLaborHours = _data["estimatedLaborHours"];
            this.actualLaborHours = _data["actualLaborHours"];
            this.mileageIn = _data["mileageIn"];
            this.mileageOut = _data["mileageOut"];
            this.customerNotes = _data["customerNotes"];
            this.technicianNotes = _data["technicianNotes"];
            this.internalNotes = _data["internalNotes"];
            this.customerApproved = _data["customerApproved"];
            this.customerApprovedAt = _data["customerApprovedAt"] ? new Date(_data["customerApprovedAt"].toString()) : undefined as any;
            this.customerSignature = _data["customerSignature"];
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            this.vehicle = _data["vehicle"] ? Vehicle.fromJS(_data["vehicle"]) : undefined as any;
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined as any;
            this.appointment = _data["appointment"] ? Appointment.fromJS(_data["appointment"]) : undefined as any;
            this.assignedTechnician = _data["assignedTechnician"] ? Staff.fromJS(_data["assignedTechnician"]) : undefined as any;
            if (Array.isArray(_data["serviceRecords"])) {
                this.serviceRecords = [] as any;
                for (let item of _data["serviceRecords"])
                    this.serviceRecords!.push(ServiceRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepairOrder {
        data = typeof data === 'object' ? data : {};
        let result = new RepairOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["vehicleId"] = this.vehicleId;
        data["customerId"] = this.customerId;
        data["appointmentId"] = this.appointmentId;
        data["assignedTechnicianId"] = this.assignedTechnicianId;
        data["orderNumber"] = this.orderNumber;
        data["description"] = this.description;
        data["status"] = this.status;
        data["priority"] = this.priority;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["scheduledStartDate"] = this.scheduledStartDate ? this.scheduledStartDate.toISOString() : undefined as any;
        data["actualStartDate"] = this.actualStartDate ? this.actualStartDate.toISOString() : undefined as any;
        data["estimatedCompletionDate"] = this.estimatedCompletionDate ? this.estimatedCompletionDate.toISOString() : undefined as any;
        data["actualCompletionDate"] = this.actualCompletionDate ? this.actualCompletionDate.toISOString() : undefined as any;
        data["estimatedLaborCost"] = this.estimatedLaborCost;
        data["estimatedPartsCost"] = this.estimatedPartsCost;
        data["actualLaborCost"] = this.actualLaborCost;
        data["actualPartsCost"] = this.actualPartsCost;
        data["estimatedTotalCost"] = this.estimatedTotalCost;
        data["actualTotalCost"] = this.actualTotalCost;
        data["estimatedLaborHours"] = this.estimatedLaborHours;
        data["actualLaborHours"] = this.actualLaborHours;
        data["mileageIn"] = this.mileageIn;
        data["mileageOut"] = this.mileageOut;
        data["customerNotes"] = this.customerNotes;
        data["technicianNotes"] = this.technicianNotes;
        data["internalNotes"] = this.internalNotes;
        data["customerApproved"] = this.customerApproved;
        data["customerApprovedAt"] = this.customerApprovedAt ? this.customerApprovedAt.toISOString() : undefined as any;
        data["customerSignature"] = this.customerSignature;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        data["vehicle"] = this.vehicle ? this.vehicle.toJSON() : undefined as any;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined as any;
        data["appointment"] = this.appointment ? this.appointment.toJSON() : undefined as any;
        data["assignedTechnician"] = this.assignedTechnician ? this.assignedTechnician.toJSON() : undefined as any;
        if (Array.isArray(this.serviceRecords)) {
            data["serviceRecords"] = [];
            for (let item of this.serviceRecords)
                data["serviceRecords"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRepairOrder {
    id?: number;
    tenantId?: number;
    vehicleId?: number;
    customerId?: number;
    appointmentId?: number | undefined;
    assignedTechnicianId?: number | undefined;
    orderNumber?: string;
    description?: string;
    status?: RepairOrderStatus;
    priority?: RepairOrderPriority;
    createdAt?: Date;
    scheduledStartDate?: Date | undefined;
    actualStartDate?: Date | undefined;
    estimatedCompletionDate?: Date | undefined;
    actualCompletionDate?: Date | undefined;
    estimatedLaborCost?: number;
    estimatedPartsCost?: number;
    actualLaborCost?: number;
    actualPartsCost?: number;
    estimatedTotalCost?: number;
    actualTotalCost?: number;
    estimatedLaborHours?: number | undefined;
    actualLaborHours?: number | undefined;
    mileageIn?: number | undefined;
    mileageOut?: number | undefined;
    customerNotes?: string | undefined;
    technicianNotes?: string | undefined;
    internalNotes?: string | undefined;
    customerApproved?: boolean;
    customerApprovedAt?: Date | undefined;
    customerSignature?: string | undefined;
    tenant?: Tenant;
    vehicle?: Vehicle;
    customer?: Customer;
    appointment?: Appointment | undefined;
    assignedTechnician?: Staff | undefined;
    serviceRecords?: ServiceRecord[];
}

export enum RepairOrderStatus {
    Pending = "Pending",
    Approved = "Approved",
    InProgress = "InProgress",
    AwaitingParts = "AwaitingParts",
    AwaitingApproval = "AwaitingApproval",
    Completed = "Completed",
    Invoiced = "Invoiced",
    Paid = "Paid",
    Cancelled = "Cancelled",
}

export enum RepairOrderPriority {
    Low = "Low",
    Normal = "Normal",
    High = "High",
    Urgent = "Urgent",
}

export class Staff implements IStaff {
    id?: number;
    tenantId?: number | undefined;
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    role?: StaffRole;
    status?: StaffStatus;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    hourlyRate?: number | undefined;
    specializations?: string | undefined;
    certificationNumbers?: string | undefined;
    notes?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    fullName?: string;
    tenant?: Tenant;
    assignedAppointments?: Appointment[];
    assignedRepairOrders?: RepairOrder[];

    constructor(data?: IStaff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.role = _data["role"];
            this.status = _data["status"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : undefined as any;
            this.terminationDate = _data["terminationDate"] ? new Date(_data["terminationDate"].toString()) : undefined as any;
            this.hourlyRate = _data["hourlyRate"];
            this.specializations = _data["specializations"];
            this.certificationNumbers = _data["certificationNumbers"];
            this.notes = _data["notes"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
            this.fullName = _data["fullName"];
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
            if (Array.isArray(_data["assignedAppointments"])) {
                this.assignedAppointments = [] as any;
                for (let item of _data["assignedAppointments"])
                    this.assignedAppointments!.push(Appointment.fromJS(item));
            }
            if (Array.isArray(_data["assignedRepairOrders"])) {
                this.assignedRepairOrders = [] as any;
                for (let item of _data["assignedRepairOrders"])
                    this.assignedRepairOrders!.push(RepairOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Staff {
        data = typeof data === 'object' ? data : {};
        let result = new Staff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["role"] = this.role;
        data["status"] = this.status;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : undefined as any;
        data["terminationDate"] = this.terminationDate ? this.terminationDate.toISOString() : undefined as any;
        data["hourlyRate"] = this.hourlyRate;
        data["specializations"] = this.specializations;
        data["certificationNumbers"] = this.certificationNumbers;
        data["notes"] = this.notes;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        data["fullName"] = this.fullName;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        if (Array.isArray(this.assignedAppointments)) {
            data["assignedAppointments"] = [];
            for (let item of this.assignedAppointments)
                data["assignedAppointments"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.assignedRepairOrders)) {
            data["assignedRepairOrders"] = [];
            for (let item of this.assignedRepairOrders)
                data["assignedRepairOrders"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IStaff {
    id?: number;
    tenantId?: number | undefined;
    userId?: string | undefined;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    role?: StaffRole;
    status?: StaffStatus;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    hourlyRate?: number | undefined;
    specializations?: string | undefined;
    certificationNumbers?: string | undefined;
    notes?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    fullName?: string;
    tenant?: Tenant;
    assignedAppointments?: Appointment[];
    assignedRepairOrders?: RepairOrder[];
}

export enum StaffRole {
    Owner = "Owner",
    Manager = "Manager",
    Dispatcher = "Dispatcher",
    Technician = "Technician",
    Advisor = "Advisor",
}

export enum StaffStatus {
    Active = "Active",
    OnLeave = "OnLeave",
    Suspended = "Suspended",
    Terminated = "Terminated",
}

export class ServiceItem implements IServiceItem {
    id?: number;
    tenantId?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    durationMinutes?: number;
    isActive?: boolean;
    isBookableOnline?: boolean;
    category?: ServiceCategory;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    tenant?: Tenant;

    constructor(data?: IServiceItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.basePrice = _data["basePrice"];
            this.durationMinutes = _data["durationMinutes"];
            this.isActive = _data["isActive"];
            this.isBookableOnline = _data["isBookableOnline"];
            this.category = _data["category"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : undefined as any;
        }
    }

    static fromJS(data: any): ServiceItem {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["basePrice"] = this.basePrice;
        data["durationMinutes"] = this.durationMinutes;
        data["isActive"] = this.isActive;
        data["isBookableOnline"] = this.isBookableOnline;
        data["category"] = this.category;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        return data;
    }
}

export interface IServiceItem {
    id?: number;
    tenantId?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    durationMinutes?: number;
    isActive?: boolean;
    isBookableOnline?: boolean;
    category?: ServiceCategory;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    tenant?: Tenant;
}

export enum ServiceCategory {
    General = "General",
    OilChange = "OilChange",
    BrakeService = "BrakeService",
    TireService = "TireService",
    Engine = "Engine",
    Transmission = "Transmission",
    Electrical = "Electrical",
    Diagnostic = "Diagnostic",
    Inspection = "Inspection",
    Maintenance = "Maintenance",
}

export class CreateAppointmentDto implements ICreateAppointmentDto {
    customerId?: number;
    vehicleId?: number;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;

    constructor(data?: ICreateAppointmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.vehicleId = _data["vehicleId"];
            this.scheduledDate = _data["scheduledDate"] ? new Date(_data["scheduledDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreateAppointmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppointmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["vehicleId"] = this.vehicleId;
        data["scheduledDate"] = this.scheduledDate ? this.scheduledDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["status"] = this.status;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ICreateAppointmentDto {
    customerId?: number;
    vehicleId?: number;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;
}

export class UpdateAppointmentDto implements IUpdateAppointmentDto {
    customerId?: number;
    vehicleId?: number;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;

    constructor(data?: IUpdateAppointmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.vehicleId = _data["vehicleId"];
            this.scheduledDate = _data["scheduledDate"] ? new Date(_data["scheduledDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdateAppointmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppointmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["vehicleId"] = this.vehicleId;
        data["scheduledDate"] = this.scheduledDate ? this.scheduledDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["status"] = this.status;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IUpdateAppointmentDto {
    customerId?: number;
    vehicleId?: number;
    scheduledDate?: Date;
    serviceType?: string;
    description?: string | undefined;
    status?: AppointmentStatus;
    notes?: string | undefined;
}

export class AuthResponse implements IAuthResponse {
    accessToken?: string;
    expiresAt?: Date;
    user?: UserInfo;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : undefined as any;
            this.user = _data["user"] ? UserInfo.fromJS(_data["user"]) : undefined as any;
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : undefined as any;
        data["user"] = this.user ? this.user.toJSON() : undefined as any;
        return data;
    }
}

export interface IAuthResponse {
    accessToken?: string;
    expiresAt?: Date;
    user?: UserInfo;
}

export class UserInfo implements IUserInfo {
    id?: string;
    email?: string;
    staff?: StaffInfo | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.staff = _data["staff"] ? StaffInfo.fromJS(_data["staff"]) : undefined as any;
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["staff"] = this.staff ? this.staff.toJSON() : undefined as any;
        return data;
    }
}

export interface IUserInfo {
    id?: string;
    email?: string;
    staff?: StaffInfo | undefined;
}

export class StaffInfo implements IStaffInfo {
    id?: number;
    firstName?: string;
    lastName?: string;
    role?: string;
    status?: string;
    tenantId?: number | undefined;
    tenantSlug?: string;
    tenantName?: string;

    constructor(data?: IStaffInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.role = _data["role"];
            this.status = _data["status"];
            this.tenantId = _data["tenantId"];
            this.tenantSlug = _data["tenantSlug"];
            this.tenantName = _data["tenantName"];
        }
    }

    static fromJS(data: any): StaffInfo {
        data = typeof data === 'object' ? data : {};
        let result = new StaffInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        data["status"] = this.status;
        data["tenantId"] = this.tenantId;
        data["tenantSlug"] = this.tenantSlug;
        data["tenantName"] = this.tenantName;
        return data;
    }
}

export interface IStaffInfo {
    id?: number;
    firstName?: string;
    lastName?: string;
    role?: string;
    status?: string;
    tenantId?: number | undefined;
    tenantSlug?: string;
    tenantName?: string;
}

export class RegisterRequest implements IRegisterRequest {
    email!: string;
    password!: string;
    confirmPassword!: string;
    staffId?: number | undefined;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.staffId = _data["staffId"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["staffId"] = this.staffId;
        return data;
    }
}

export interface IRegisterRequest {
    email: string;
    password: string;
    confirmPassword: string;
    staffId?: number | undefined;
}

export class LoginRequest implements ILoginRequest {
    email!: string;
    password!: string;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    email: string;
    password: string;
}

export class PublicBookingPageResponse implements IPublicBookingPageResponse {
    businessName?: string;
    slug?: string;
    description?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    logoUrl?: string | undefined;
    services?: ServiceItemDto[];
    availabilityRules?: AvailabilityRules | undefined;
    timezone?: string;

    constructor(data?: IPublicBookingPageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessName = _data["businessName"];
            this.slug = _data["slug"];
            this.description = _data["description"];
            this.address = _data["address"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.logoUrl = _data["logoUrl"];
            if (Array.isArray(_data["services"])) {
                this.services = [] as any;
                for (let item of _data["services"])
                    this.services!.push(ServiceItemDto.fromJS(item));
            }
            this.availabilityRules = _data["availabilityRules"] ? AvailabilityRules.fromJS(_data["availabilityRules"]) : undefined as any;
            this.timezone = _data["timezone"];
        }
    }

    static fromJS(data: any): PublicBookingPageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PublicBookingPageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessName"] = this.businessName;
        data["slug"] = this.slug;
        data["description"] = this.description;
        data["address"] = this.address;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["website"] = this.website;
        data["logoUrl"] = this.logoUrl;
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item ? item.toJSON() : undefined as any);
        }
        data["availabilityRules"] = this.availabilityRules ? this.availabilityRules.toJSON() : undefined as any;
        data["timezone"] = this.timezone;
        return data;
    }
}

export interface IPublicBookingPageResponse {
    businessName?: string;
    slug?: string;
    description?: string | undefined;
    address?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    logoUrl?: string | undefined;
    services?: ServiceItemDto[];
    availabilityRules?: AvailabilityRules | undefined;
    timezone?: string;
}

export class ServiceItemDto implements IServiceItemDto {
    id?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    durationMinutes?: number;
    category?: string;

    constructor(data?: IServiceItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.basePrice = _data["basePrice"];
            this.durationMinutes = _data["durationMinutes"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): ServiceItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["basePrice"] = this.basePrice;
        data["durationMinutes"] = this.durationMinutes;
        data["category"] = this.category;
        return data;
    }
}

export interface IServiceItemDto {
    id?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    durationMinutes?: number;
    category?: string;
}

export class AvailabilityRules implements IAvailabilityRules {
    timezone?: string;
    weeklySchedule?: { [key in keyof typeof DayOfWeek]?: DaySchedule; };
    slotDurationMinutes?: number;
    bufferMinutes?: number;
    maxAdvanceBookingDays?: number;
    minAdvanceBookingHours?: number;
    closedDates?: string[];
    specialDates?: { [key: string]: DaySchedule; };

    constructor(data?: IAvailabilityRules) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timezone = _data["timezone"];
            if (_data["weeklySchedule"]) {
                this.weeklySchedule = {} as any;
                for (let key in _data["weeklySchedule"]) {
                    if (_data["weeklySchedule"].hasOwnProperty(key))
                        (this.weeklySchedule as any)![key] = _data["weeklySchedule"][key] ? DaySchedule.fromJS(_data["weeklySchedule"][key]) : undefined as any;
                }
            }
            this.slotDurationMinutes = _data["slotDurationMinutes"];
            this.bufferMinutes = _data["bufferMinutes"];
            this.maxAdvanceBookingDays = _data["maxAdvanceBookingDays"];
            this.minAdvanceBookingHours = _data["minAdvanceBookingHours"];
            if (Array.isArray(_data["closedDates"])) {
                this.closedDates = [] as any;
                for (let item of _data["closedDates"])
                    this.closedDates!.push(item);
            }
            if (_data["specialDates"]) {
                this.specialDates = {} as any;
                for (let key in _data["specialDates"]) {
                    if (_data["specialDates"].hasOwnProperty(key))
                        (this.specialDates as any)![key] = _data["specialDates"][key] ? DaySchedule.fromJS(_data["specialDates"][key]) : new DaySchedule();
                }
            }
        }
    }

    static fromJS(data: any): AvailabilityRules {
        data = typeof data === 'object' ? data : {};
        let result = new AvailabilityRules();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        if (this.weeklySchedule) {
            data["weeklySchedule"] = {};
            for (let key in this.weeklySchedule) {
                if (this.weeklySchedule.hasOwnProperty(key))
                    (data["weeklySchedule"] as any)[key] = this.weeklySchedule[key] ? this.weeklySchedule[key].toJSON() : undefined as any;
            }
        }
        data["slotDurationMinutes"] = this.slotDurationMinutes;
        data["bufferMinutes"] = this.bufferMinutes;
        data["maxAdvanceBookingDays"] = this.maxAdvanceBookingDays;
        data["minAdvanceBookingHours"] = this.minAdvanceBookingHours;
        if (Array.isArray(this.closedDates)) {
            data["closedDates"] = [];
            for (let item of this.closedDates)
                data["closedDates"].push(item);
        }
        if (this.specialDates) {
            data["specialDates"] = {};
            for (let key in this.specialDates) {
                if (this.specialDates.hasOwnProperty(key))
                    (data["specialDates"] as any)[key] = this.specialDates[key] ? this.specialDates[key].toJSON() : undefined as any;
            }
        }
        return data;
    }
}

export interface IAvailabilityRules {
    timezone?: string;
    weeklySchedule?: { [key in keyof typeof DayOfWeek]?: DaySchedule; };
    slotDurationMinutes?: number;
    bufferMinutes?: number;
    maxAdvanceBookingDays?: number;
    minAdvanceBookingHours?: number;
    closedDates?: string[];
    specialDates?: { [key: string]: DaySchedule; };
}

export enum DayOfWeek {
    Sunday = "Sunday",
    Monday = "Monday",
    Tuesday = "Tuesday",
    Wednesday = "Wednesday",
    Thursday = "Thursday",
    Friday = "Friday",
    Saturday = "Saturday",
}

export class DaySchedule implements IDaySchedule {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    breaks?: BreakPeriod[] | undefined;

    constructor(data?: IDaySchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isOpen = _data["isOpen"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            if (Array.isArray(_data["breaks"])) {
                this.breaks = [] as any;
                for (let item of _data["breaks"])
                    this.breaks!.push(BreakPeriod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DaySchedule {
        data = typeof data === 'object' ? data : {};
        let result = new DaySchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOpen"] = this.isOpen;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        if (Array.isArray(this.breaks)) {
            data["breaks"] = [];
            for (let item of this.breaks)
                data["breaks"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDaySchedule {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    breaks?: BreakPeriod[] | undefined;
}

export class BreakPeriod implements IBreakPeriod {
    startTime?: string;
    endTime?: string;

    constructor(data?: IBreakPeriod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): BreakPeriod {
        data = typeof data === 'object' ? data : {};
        let result = new BreakPeriod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IBreakPeriod {
    startTime?: string;
    endTime?: string;
}

export class PublicBookingPageDto implements IPublicBookingPageDto {
    profile?: TenantProfileDto;
    services?: PublicServiceDto[];
    availability?: AvailabilityInfoDto;
    seo?: SeoMetadataDto;

    constructor(data?: IPublicBookingPageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.profile = _data["profile"] ? TenantProfileDto.fromJS(_data["profile"]) : undefined as any;
            if (Array.isArray(_data["services"])) {
                this.services = [] as any;
                for (let item of _data["services"])
                    this.services!.push(PublicServiceDto.fromJS(item));
            }
            this.availability = _data["availability"] ? AvailabilityInfoDto.fromJS(_data["availability"]) : undefined as any;
            this.seo = _data["seo"] ? SeoMetadataDto.fromJS(_data["seo"]) : undefined as any;
        }
    }

    static fromJS(data: any): PublicBookingPageDto {
        data = typeof data === 'object' ? data : {};
        let result = new PublicBookingPageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profile"] = this.profile ? this.profile.toJSON() : undefined as any;
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item ? item.toJSON() : undefined as any);
        }
        data["availability"] = this.availability ? this.availability.toJSON() : undefined as any;
        data["seo"] = this.seo ? this.seo.toJSON() : undefined as any;
        return data;
    }
}

export interface IPublicBookingPageDto {
    profile?: TenantProfileDto;
    services?: PublicServiceDto[];
    availability?: AvailabilityInfoDto;
    seo?: SeoMetadataDto;
}

export class TenantProfileDto implements ITenantProfileDto {
    businessName?: string;
    slug?: string;
    bio?: string | undefined;
    description?: string | undefined;
    location?: LocationDto;
    contact?: ContactDto;
    logoUrl?: string | undefined;
    website?: string | undefined;

    constructor(data?: ITenantProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessName = _data["businessName"];
            this.slug = _data["slug"];
            this.bio = _data["bio"];
            this.description = _data["description"];
            this.location = _data["location"] ? LocationDto.fromJS(_data["location"]) : undefined as any;
            this.contact = _data["contact"] ? ContactDto.fromJS(_data["contact"]) : undefined as any;
            this.logoUrl = _data["logoUrl"];
            this.website = _data["website"];
        }
    }

    static fromJS(data: any): TenantProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessName"] = this.businessName;
        data["slug"] = this.slug;
        data["bio"] = this.bio;
        data["description"] = this.description;
        data["location"] = this.location ? this.location.toJSON() : undefined as any;
        data["contact"] = this.contact ? this.contact.toJSON() : undefined as any;
        data["logoUrl"] = this.logoUrl;
        data["website"] = this.website;
        return data;
    }
}

export interface ITenantProfileDto {
    businessName?: string;
    slug?: string;
    bio?: string | undefined;
    description?: string | undefined;
    location?: LocationDto;
    contact?: ContactDto;
    logoUrl?: string | undefined;
    website?: string | undefined;
}

export class LocationDto implements ILocationDto {
    fullAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    area?: string | undefined;

    constructor(data?: ILocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullAddress = _data["fullAddress"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
            this.area = _data["area"];
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullAddress"] = this.fullAddress;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        data["area"] = this.area;
        return data;
    }
}

export interface ILocationDto {
    fullAddress?: string | undefined;
    street?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    area?: string | undefined;
}

export class ContactDto implements IContactDto {
    phone?: string | undefined;
    email?: string | undefined;
    formattedPhone?: string | undefined;

    constructor(data?: IContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.formattedPhone = _data["formattedPhone"];
        }
    }

    static fromJS(data: any): ContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["formattedPhone"] = this.formattedPhone;
        return data;
    }
}

export interface IContactDto {
    phone?: string | undefined;
    email?: string | undefined;
    formattedPhone?: string | undefined;
}

export class PublicServiceDto implements IPublicServiceDto {
    id?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    formattedPrice?: string;
    durationMinutes?: number;
    formattedDuration?: string;
    category?: string;

    constructor(data?: IPublicServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.basePrice = _data["basePrice"];
            this.formattedPrice = _data["formattedPrice"];
            this.durationMinutes = _data["durationMinutes"];
            this.formattedDuration = _data["formattedDuration"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): PublicServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PublicServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["basePrice"] = this.basePrice;
        data["formattedPrice"] = this.formattedPrice;
        data["durationMinutes"] = this.durationMinutes;
        data["formattedDuration"] = this.formattedDuration;
        data["category"] = this.category;
        return data;
    }
}

export interface IPublicServiceDto {
    id?: number;
    name?: string;
    description?: string | undefined;
    basePrice?: number;
    formattedPrice?: string;
    durationMinutes?: number;
    formattedDuration?: string;
    category?: string;
}

export class AvailabilityInfoDto implements IAvailabilityInfoDto {
    timezone?: string;
    weeklyHours?: { [key: string]: BusinessHoursDto; };
    closedDates?: string[];
    specialHours?: { [key: string]: BusinessHoursDto; };
    bookingRules?: BookingRulesDto;

    constructor(data?: IAvailabilityInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timezone = _data["timezone"];
            if (_data["weeklyHours"]) {
                this.weeklyHours = {} as any;
                for (let key in _data["weeklyHours"]) {
                    if (_data["weeklyHours"].hasOwnProperty(key))
                        (this.weeklyHours as any)![key] = _data["weeklyHours"][key] ? BusinessHoursDto.fromJS(_data["weeklyHours"][key]) : new BusinessHoursDto();
                }
            }
            if (Array.isArray(_data["closedDates"])) {
                this.closedDates = [] as any;
                for (let item of _data["closedDates"])
                    this.closedDates!.push(item);
            }
            if (_data["specialHours"]) {
                this.specialHours = {} as any;
                for (let key in _data["specialHours"]) {
                    if (_data["specialHours"].hasOwnProperty(key))
                        (this.specialHours as any)![key] = _data["specialHours"][key] ? BusinessHoursDto.fromJS(_data["specialHours"][key]) : new BusinessHoursDto();
                }
            }
            this.bookingRules = _data["bookingRules"] ? BookingRulesDto.fromJS(_data["bookingRules"]) : undefined as any;
        }
    }

    static fromJS(data: any): AvailabilityInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailabilityInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        if (this.weeklyHours) {
            data["weeklyHours"] = {};
            for (let key in this.weeklyHours) {
                if (this.weeklyHours.hasOwnProperty(key))
                    (data["weeklyHours"] as any)[key] = this.weeklyHours[key] ? this.weeklyHours[key].toJSON() : undefined as any;
            }
        }
        if (Array.isArray(this.closedDates)) {
            data["closedDates"] = [];
            for (let item of this.closedDates)
                data["closedDates"].push(item);
        }
        if (this.specialHours) {
            data["specialHours"] = {};
            for (let key in this.specialHours) {
                if (this.specialHours.hasOwnProperty(key))
                    (data["specialHours"] as any)[key] = this.specialHours[key] ? this.specialHours[key].toJSON() : undefined as any;
            }
        }
        data["bookingRules"] = this.bookingRules ? this.bookingRules.toJSON() : undefined as any;
        return data;
    }
}

export interface IAvailabilityInfoDto {
    timezone?: string;
    weeklyHours?: { [key: string]: BusinessHoursDto; };
    closedDates?: string[];
    specialHours?: { [key: string]: BusinessHoursDto; };
    bookingRules?: BookingRulesDto;
}

export class BusinessHoursDto implements IBusinessHoursDto {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    formattedHours?: string | undefined;

    constructor(data?: IBusinessHoursDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isOpen = _data["isOpen"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.formattedHours = _data["formattedHours"];
        }
    }

    static fromJS(data: any): BusinessHoursDto {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessHoursDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOpen"] = this.isOpen;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["formattedHours"] = this.formattedHours;
        return data;
    }
}

export interface IBusinessHoursDto {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    formattedHours?: string | undefined;
}

export class BookingRulesDto implements IBookingRulesDto {
    slotDurationMinutes?: number;
    maxAdvanceBookingDays?: number;
    minAdvanceBookingHours?: number;

    constructor(data?: IBookingRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slotDurationMinutes = _data["slotDurationMinutes"];
            this.maxAdvanceBookingDays = _data["maxAdvanceBookingDays"];
            this.minAdvanceBookingHours = _data["minAdvanceBookingHours"];
        }
    }

    static fromJS(data: any): BookingRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookingRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slotDurationMinutes"] = this.slotDurationMinutes;
        data["maxAdvanceBookingDays"] = this.maxAdvanceBookingDays;
        data["minAdvanceBookingHours"] = this.minAdvanceBookingHours;
        return data;
    }
}

export interface IBookingRulesDto {
    slotDurationMinutes?: number;
    maxAdvanceBookingDays?: number;
    minAdvanceBookingHours?: number;
}

export class SeoMetadataDto implements ISeoMetadataDto {
    title?: string;
    description?: string;
    keywords?: string;
    canonicalUrl?: string;
    openGraph?: OpenGraphDto;
    twitter?: TwitterCardDto;
    structuredData?: string;

    constructor(data?: ISeoMetadataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.keywords = _data["keywords"];
            this.canonicalUrl = _data["canonicalUrl"];
            this.openGraph = _data["openGraph"] ? OpenGraphDto.fromJS(_data["openGraph"]) : undefined as any;
            this.twitter = _data["twitter"] ? TwitterCardDto.fromJS(_data["twitter"]) : undefined as any;
            this.structuredData = _data["structuredData"];
        }
    }

    static fromJS(data: any): SeoMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeoMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["keywords"] = this.keywords;
        data["canonicalUrl"] = this.canonicalUrl;
        data["openGraph"] = this.openGraph ? this.openGraph.toJSON() : undefined as any;
        data["twitter"] = this.twitter ? this.twitter.toJSON() : undefined as any;
        data["structuredData"] = this.structuredData;
        return data;
    }
}

export interface ISeoMetadataDto {
    title?: string;
    description?: string;
    keywords?: string;
    canonicalUrl?: string;
    openGraph?: OpenGraphDto;
    twitter?: TwitterCardDto;
    structuredData?: string;
}

export class OpenGraphDto implements IOpenGraphDto {
    type?: string;
    title?: string;
    description?: string;
    url?: string;
    image?: string | undefined;
    siteName?: string;
    locale?: string;

    constructor(data?: IOpenGraphDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.url = _data["url"];
            this.image = _data["image"];
            this.siteName = _data["siteName"];
            this.locale = _data["locale"];
        }
    }

    static fromJS(data: any): OpenGraphDto {
        data = typeof data === 'object' ? data : {};
        let result = new OpenGraphDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["description"] = this.description;
        data["url"] = this.url;
        data["image"] = this.image;
        data["siteName"] = this.siteName;
        data["locale"] = this.locale;
        return data;
    }
}

export interface IOpenGraphDto {
    type?: string;
    title?: string;
    description?: string;
    url?: string;
    image?: string | undefined;
    siteName?: string;
    locale?: string;
}

export class TwitterCardDto implements ITwitterCardDto {
    card?: string;
    title?: string;
    description?: string;
    image?: string | undefined;

    constructor(data?: ITwitterCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.card = _data["card"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): TwitterCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new TwitterCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["card"] = this.card;
        data["title"] = this.title;
        data["description"] = this.description;
        data["image"] = this.image;
        return data;
    }
}

export interface ITwitterCardDto {
    card?: string;
    title?: string;
    description?: string;
    image?: string | undefined;
}

export class CalendarMonthDto implements ICalendarMonthDto {
    year?: number;
    month?: number;
    monthName?: string;
    days?: CalendarDayDto[];

    constructor(data?: ICalendarMonthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.monthName = _data["monthName"];
            if (Array.isArray(_data["days"])) {
                this.days = [] as any;
                for (let item of _data["days"])
                    this.days!.push(CalendarDayDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CalendarMonthDto {
        data = typeof data === 'object' ? data : {};
        let result = new CalendarMonthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["monthName"] = this.monthName;
        if (Array.isArray(this.days)) {
            data["days"] = [];
            for (let item of this.days)
                data["days"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICalendarMonthDto {
    year?: number;
    month?: number;
    monthName?: string;
    days?: CalendarDayDto[];
}

export class CalendarDayDto implements ICalendarDayDto {
    date?: Date;
    dayOfMonth?: number;
    dayOfWeek?: string;
    isOpen?: boolean;
    isToday?: boolean;
    isPast?: boolean;
    hasAvailability?: boolean;
    availableSlots?: number;
    reason?: string | undefined;

    constructor(data?: ICalendarDayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : undefined as any;
            this.dayOfMonth = _data["dayOfMonth"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.isOpen = _data["isOpen"];
            this.isToday = _data["isToday"];
            this.isPast = _data["isPast"];
            this.hasAvailability = _data["hasAvailability"];
            this.availableSlots = _data["availableSlots"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): CalendarDayDto {
        data = typeof data === 'object' ? data : {};
        let result = new CalendarDayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : undefined as any;
        data["dayOfMonth"] = this.dayOfMonth;
        data["dayOfWeek"] = this.dayOfWeek;
        data["isOpen"] = this.isOpen;
        data["isToday"] = this.isToday;
        data["isPast"] = this.isPast;
        data["hasAvailability"] = this.hasAvailability;
        data["availableSlots"] = this.availableSlots;
        data["reason"] = this.reason;
        return data;
    }
}

export interface ICalendarDayDto {
    date?: Date;
    dayOfMonth?: number;
    dayOfWeek?: string;
    isOpen?: boolean;
    isToday?: boolean;
    isPast?: boolean;
    hasAvailability?: boolean;
    availableSlots?: number;
    reason?: string | undefined;
}

export class AvailableTimeSlotsResponse implements IAvailableTimeSlotsResponse {
    date?: Date;
    serviceName?: string;
    durationMinutes?: number;
    availableSlots?: TimeSlotDto[];

    constructor(data?: IAvailableTimeSlotsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : undefined as any;
            this.serviceName = _data["serviceName"];
            this.durationMinutes = _data["durationMinutes"];
            if (Array.isArray(_data["availableSlots"])) {
                this.availableSlots = [] as any;
                for (let item of _data["availableSlots"])
                    this.availableSlots!.push(TimeSlotDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AvailableTimeSlotsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableTimeSlotsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : undefined as any;
        data["serviceName"] = this.serviceName;
        data["durationMinutes"] = this.durationMinutes;
        if (Array.isArray(this.availableSlots)) {
            data["availableSlots"] = [];
            for (let item of this.availableSlots)
                data["availableSlots"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAvailableTimeSlotsResponse {
    date?: Date;
    serviceName?: string;
    durationMinutes?: number;
    availableSlots?: TimeSlotDto[];
}

export class TimeSlotDto implements ITimeSlotDto {
    startTime?: Date;
    endTime?: Date;
    isAvailable?: boolean;

    constructor(data?: ITimeSlotDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined as any;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : undefined as any;
            this.isAvailable = _data["isAvailable"];
        }
    }

    static fromJS(data: any): TimeSlotDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSlotDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined as any;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined as any;
        data["isAvailable"] = this.isAvailable;
        return data;
    }
}

export interface ITimeSlotDto {
    startTime?: Date;
    endTime?: Date;
    isAvailable?: boolean;
}

export class CreateCustomerDto implements ICreateCustomerDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;

    constructor(data?: ICreateCustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): CreateCustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        return data;
    }
}

export interface ICreateCustomerDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;
}

export class UpdateCustomerDto implements IUpdateCustomerDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;

    constructor(data?: IUpdateCustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): UpdateCustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        return data;
    }
}

export interface IUpdateCustomerDto {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string | undefined;
}

export class OnboardingStatusResponse implements IOnboardingStatusResponse {
    isCompleted?: boolean;
    currentStep?: number;
    completedAt?: Date | undefined;
    tenant?: TenantSummary | undefined;
    publicBookingUrl?: string | undefined;

    constructor(data?: IOnboardingStatusResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isCompleted = _data["isCompleted"];
            this.currentStep = _data["currentStep"];
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : undefined as any;
            this.tenant = _data["tenant"] ? TenantSummary.fromJS(_data["tenant"]) : undefined as any;
            this.publicBookingUrl = _data["publicBookingUrl"];
        }
    }

    static fromJS(data: any): OnboardingStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OnboardingStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCompleted"] = this.isCompleted;
        data["currentStep"] = this.currentStep;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : undefined as any;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined as any;
        data["publicBookingUrl"] = this.publicBookingUrl;
        return data;
    }
}

export interface IOnboardingStatusResponse {
    isCompleted?: boolean;
    currentStep?: number;
    completedAt?: Date | undefined;
    tenant?: TenantSummary | undefined;
    publicBookingUrl?: string | undefined;
}

export class TenantSummary implements ITenantSummary {
    id?: number;
    name?: string;
    slug?: string;
    bookingEnabled?: boolean;
    serviceItemCount?: number;

    constructor(data?: ITenantSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.slug = _data["slug"];
            this.bookingEnabled = _data["bookingEnabled"];
            this.serviceItemCount = _data["serviceItemCount"];
        }
    }

    static fromJS(data: any): TenantSummary {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["bookingEnabled"] = this.bookingEnabled;
        data["serviceItemCount"] = this.serviceItemCount;
        return data;
    }
}

export interface ITenantSummary {
    id?: number;
    name?: string;
    slug?: string;
    bookingEnabled?: boolean;
    serviceItemCount?: number;
}

export class SlugCheckResponse implements ISlugCheckResponse {
    isAvailable?: boolean;
    message?: string | undefined;
    suggestedSlug?: string | undefined;

    constructor(data?: ISlugCheckResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isAvailable = _data["isAvailable"];
            this.message = _data["message"];
            this.suggestedSlug = _data["suggestedSlug"];
        }
    }

    static fromJS(data: any): SlugCheckResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SlugCheckResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAvailable"] = this.isAvailable;
        data["message"] = this.message;
        data["suggestedSlug"] = this.suggestedSlug;
        return data;
    }
}

export interface ISlugCheckResponse {
    isAvailable?: boolean;
    message?: string | undefined;
    suggestedSlug?: string | undefined;
}

export class SlugCheckRequest implements ISlugCheckRequest {
    slug!: string;

    constructor(data?: ISlugCheckRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slug = _data["slug"];
        }
    }

    static fromJS(data: any): SlugCheckRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SlugCheckRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slug"] = this.slug;
        return data;
    }
}

export interface ISlugCheckRequest {
    slug: string;
}

export class OnboardingStep1Request implements IOnboardingStep1Request {
    businessName!: string;
    slug?: string | undefined;
    businessAddress!: string;
    city!: string;
    state!: string;
    zipCode!: string;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;

    constructor(data?: IOnboardingStep1Request) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessName = _data["businessName"];
            this.slug = _data["slug"];
            this.businessAddress = _data["businessAddress"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): OnboardingStep1Request {
        data = typeof data === 'object' ? data : {};
        let result = new OnboardingStep1Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessName"] = this.businessName;
        data["slug"] = this.slug;
        data["businessAddress"] = this.businessAddress;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["website"] = this.website;
        data["description"] = this.description;
        return data;
    }
}

export interface IOnboardingStep1Request {
    businessName: string;
    slug?: string | undefined;
    businessAddress: string;
    city: string;
    state: string;
    zipCode: string;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;
}

export class OnboardingStep2Request implements IOnboardingStep2Request {
    availabilityRules!: AvailabilityRules;

    constructor(data?: IOnboardingStep2Request) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.availabilityRules = new AvailabilityRules();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.availabilityRules = _data["availabilityRules"] ? AvailabilityRules.fromJS(_data["availabilityRules"]) : new AvailabilityRules();
        }
    }

    static fromJS(data: any): OnboardingStep2Request {
        data = typeof data === 'object' ? data : {};
        let result = new OnboardingStep2Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["availabilityRules"] = this.availabilityRules ? this.availabilityRules.toJSON() : undefined as any;
        return data;
    }
}

export interface IOnboardingStep2Request {
    availabilityRules: AvailabilityRules;
}

export class OnboardingStep3Request implements IOnboardingStep3Request {
    serviceName!: string;
    serviceDescription?: string | undefined;
    basePrice!: number;
    durationMinutes!: number;
    category?: ServiceCategory;

    constructor(data?: IOnboardingStep3Request) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serviceName = _data["serviceName"];
            this.serviceDescription = _data["serviceDescription"];
            this.basePrice = _data["basePrice"];
            this.durationMinutes = _data["durationMinutes"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): OnboardingStep3Request {
        data = typeof data === 'object' ? data : {};
        let result = new OnboardingStep3Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceName"] = this.serviceName;
        data["serviceDescription"] = this.serviceDescription;
        data["basePrice"] = this.basePrice;
        data["durationMinutes"] = this.durationMinutes;
        data["category"] = this.category;
        return data;
    }
}

export interface IOnboardingStep3Request {
    serviceName: string;
    serviceDescription?: string | undefined;
    basePrice: number;
    durationMinutes: number;
    category?: ServiceCategory;
}

export class CompleteOnboardingRequest implements ICompleteOnboardingRequest {
    businessInfo!: OnboardingStep1Request;
    availability!: OnboardingStep2Request;
    firstService!: OnboardingStep3Request;

    constructor(data?: ICompleteOnboardingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.businessInfo = new OnboardingStep1Request();
            this.availability = new OnboardingStep2Request();
            this.firstService = new OnboardingStep3Request();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessInfo = _data["businessInfo"] ? OnboardingStep1Request.fromJS(_data["businessInfo"]) : new OnboardingStep1Request();
            this.availability = _data["availability"] ? OnboardingStep2Request.fromJS(_data["availability"]) : new OnboardingStep2Request();
            this.firstService = _data["firstService"] ? OnboardingStep3Request.fromJS(_data["firstService"]) : new OnboardingStep3Request();
        }
    }

    static fromJS(data: any): CompleteOnboardingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteOnboardingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessInfo"] = this.businessInfo ? this.businessInfo.toJSON() : undefined as any;
        data["availability"] = this.availability ? this.availability.toJSON() : undefined as any;
        data["firstService"] = this.firstService ? this.firstService.toJSON() : undefined as any;
        return data;
    }
}

export interface ICompleteOnboardingRequest {
    businessInfo: OnboardingStep1Request;
    availability: OnboardingStep2Request;
    firstService: OnboardingStep3Request;
}

export class CreateServiceRecordDto implements ICreateServiceRecordDto {
    vehicleId?: number;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICreateServiceRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleId = _data["vehicleId"];
            this.serviceDate = _data["serviceDate"] ? new Date(_data["serviceDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.laborCost = _data["laborCost"];
            this.partsCost = _data["partsCost"];
            this.mileageAtService = _data["mileageAtService"];
            this.technicianName = _data["technicianName"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreateServiceRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleId"] = this.vehicleId;
        data["serviceDate"] = this.serviceDate ? this.serviceDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["laborCost"] = this.laborCost;
        data["partsCost"] = this.partsCost;
        data["mileageAtService"] = this.mileageAtService;
        data["technicianName"] = this.technicianName;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ICreateServiceRecordDto {
    vehicleId?: number;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;
}

export class UpdateServiceRecordDto implements IUpdateServiceRecordDto {
    vehicleId?: number;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IUpdateServiceRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleId = _data["vehicleId"];
            this.serviceDate = _data["serviceDate"] ? new Date(_data["serviceDate"].toString()) : undefined as any;
            this.serviceType = _data["serviceType"];
            this.description = _data["description"];
            this.laborCost = _data["laborCost"];
            this.partsCost = _data["partsCost"];
            this.mileageAtService = _data["mileageAtService"];
            this.technicianName = _data["technicianName"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdateServiceRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateServiceRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleId"] = this.vehicleId;
        data["serviceDate"] = this.serviceDate ? this.serviceDate.toISOString() : undefined as any;
        data["serviceType"] = this.serviceType;
        data["description"] = this.description;
        data["laborCost"] = this.laborCost;
        data["partsCost"] = this.partsCost;
        data["mileageAtService"] = this.mileageAtService;
        data["technicianName"] = this.technicianName;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IUpdateServiceRecordDto {
    vehicleId?: number;
    serviceDate?: Date;
    serviceType?: string;
    description?: string;
    laborCost?: number;
    partsCost?: number;
    mileageAtService?: number | undefined;
    technicianName?: string | undefined;
    notes?: string | undefined;
}

export class SiteSettingsDto implements ISiteSettingsDto {
    id?: number;
    businessName?: string;
    tagline?: string;
    address?: string;
    city?: string;
    state?: string;
    zipCode?: string;
    phone?: string;
    email?: string;
    mondayFridayHours?: string;
    saturdayHours?: string;
    sundayHours?: string;
    vehiclesServiced?: number;
    satisfactionRate?: number;
    yearsExperience?: number;
    heroTitle?: string;
    heroSubtitle?: string;
    primaryCtaText?: string;
    secondaryCtaText?: string;
    service1Title?: string;
    service1Description?: string;
    service1Feature1?: string;
    service1Feature2?: string;
    service1Feature3?: string;
    service1Feature4?: string;
    service1ImageUrl?: string | undefined;
    service2Title?: string;
    service2Description?: string;
    service2Feature1?: string;
    service2Feature2?: string;
    service2Feature3?: string;
    service2Feature4?: string;
    service2ImageUrl?: string | undefined;
    service3Title?: string;
    service3Description?: string;
    service3Feature1?: string;
    service3Feature2?: string;
    service3Feature3?: string;
    service3Feature4?: string;
    service3ImageUrl?: string | undefined;
    whyFeature1Title?: string;
    whyFeature1Description?: string;
    whyFeature2Title?: string;
    whyFeature2Description?: string;
    whyFeature3Title?: string;
    whyFeature3Description?: string;
    whyFeature4Title?: string;
    whyFeature4Description?: string;
    ctaTitle?: string;
    ctaSubtitle?: string;
    ctaButtonText?: string;
    logoUrl?: string | undefined;
    heroImageUrl?: string | undefined;
    updatedAt?: Date;

    constructor(data?: ISiteSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.businessName = _data["businessName"];
            this.tagline = _data["tagline"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.mondayFridayHours = _data["mondayFridayHours"];
            this.saturdayHours = _data["saturdayHours"];
            this.sundayHours = _data["sundayHours"];
            this.vehiclesServiced = _data["vehiclesServiced"];
            this.satisfactionRate = _data["satisfactionRate"];
            this.yearsExperience = _data["yearsExperience"];
            this.heroTitle = _data["heroTitle"];
            this.heroSubtitle = _data["heroSubtitle"];
            this.primaryCtaText = _data["primaryCtaText"];
            this.secondaryCtaText = _data["secondaryCtaText"];
            this.service1Title = _data["service1Title"];
            this.service1Description = _data["service1Description"];
            this.service1Feature1 = _data["service1Feature1"];
            this.service1Feature2 = _data["service1Feature2"];
            this.service1Feature3 = _data["service1Feature3"];
            this.service1Feature4 = _data["service1Feature4"];
            this.service1ImageUrl = _data["service1ImageUrl"];
            this.service2Title = _data["service2Title"];
            this.service2Description = _data["service2Description"];
            this.service2Feature1 = _data["service2Feature1"];
            this.service2Feature2 = _data["service2Feature2"];
            this.service2Feature3 = _data["service2Feature3"];
            this.service2Feature4 = _data["service2Feature4"];
            this.service2ImageUrl = _data["service2ImageUrl"];
            this.service3Title = _data["service3Title"];
            this.service3Description = _data["service3Description"];
            this.service3Feature1 = _data["service3Feature1"];
            this.service3Feature2 = _data["service3Feature2"];
            this.service3Feature3 = _data["service3Feature3"];
            this.service3Feature4 = _data["service3Feature4"];
            this.service3ImageUrl = _data["service3ImageUrl"];
            this.whyFeature1Title = _data["whyFeature1Title"];
            this.whyFeature1Description = _data["whyFeature1Description"];
            this.whyFeature2Title = _data["whyFeature2Title"];
            this.whyFeature2Description = _data["whyFeature2Description"];
            this.whyFeature3Title = _data["whyFeature3Title"];
            this.whyFeature3Description = _data["whyFeature3Description"];
            this.whyFeature4Title = _data["whyFeature4Title"];
            this.whyFeature4Description = _data["whyFeature4Description"];
            this.ctaTitle = _data["ctaTitle"];
            this.ctaSubtitle = _data["ctaSubtitle"];
            this.ctaButtonText = _data["ctaButtonText"];
            this.logoUrl = _data["logoUrl"];
            this.heroImageUrl = _data["heroImageUrl"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): SiteSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SiteSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["businessName"] = this.businessName;
        data["tagline"] = this.tagline;
        data["address"] = this.address;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["mondayFridayHours"] = this.mondayFridayHours;
        data["saturdayHours"] = this.saturdayHours;
        data["sundayHours"] = this.sundayHours;
        data["vehiclesServiced"] = this.vehiclesServiced;
        data["satisfactionRate"] = this.satisfactionRate;
        data["yearsExperience"] = this.yearsExperience;
        data["heroTitle"] = this.heroTitle;
        data["heroSubtitle"] = this.heroSubtitle;
        data["primaryCtaText"] = this.primaryCtaText;
        data["secondaryCtaText"] = this.secondaryCtaText;
        data["service1Title"] = this.service1Title;
        data["service1Description"] = this.service1Description;
        data["service1Feature1"] = this.service1Feature1;
        data["service1Feature2"] = this.service1Feature2;
        data["service1Feature3"] = this.service1Feature3;
        data["service1Feature4"] = this.service1Feature4;
        data["service1ImageUrl"] = this.service1ImageUrl;
        data["service2Title"] = this.service2Title;
        data["service2Description"] = this.service2Description;
        data["service2Feature1"] = this.service2Feature1;
        data["service2Feature2"] = this.service2Feature2;
        data["service2Feature3"] = this.service2Feature3;
        data["service2Feature4"] = this.service2Feature4;
        data["service2ImageUrl"] = this.service2ImageUrl;
        data["service3Title"] = this.service3Title;
        data["service3Description"] = this.service3Description;
        data["service3Feature1"] = this.service3Feature1;
        data["service3Feature2"] = this.service3Feature2;
        data["service3Feature3"] = this.service3Feature3;
        data["service3Feature4"] = this.service3Feature4;
        data["service3ImageUrl"] = this.service3ImageUrl;
        data["whyFeature1Title"] = this.whyFeature1Title;
        data["whyFeature1Description"] = this.whyFeature1Description;
        data["whyFeature2Title"] = this.whyFeature2Title;
        data["whyFeature2Description"] = this.whyFeature2Description;
        data["whyFeature3Title"] = this.whyFeature3Title;
        data["whyFeature3Description"] = this.whyFeature3Description;
        data["whyFeature4Title"] = this.whyFeature4Title;
        data["whyFeature4Description"] = this.whyFeature4Description;
        data["ctaTitle"] = this.ctaTitle;
        data["ctaSubtitle"] = this.ctaSubtitle;
        data["ctaButtonText"] = this.ctaButtonText;
        data["logoUrl"] = this.logoUrl;
        data["heroImageUrl"] = this.heroImageUrl;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface ISiteSettingsDto {
    id?: number;
    businessName?: string;
    tagline?: string;
    address?: string;
    city?: string;
    state?: string;
    zipCode?: string;
    phone?: string;
    email?: string;
    mondayFridayHours?: string;
    saturdayHours?: string;
    sundayHours?: string;
    vehiclesServiced?: number;
    satisfactionRate?: number;
    yearsExperience?: number;
    heroTitle?: string;
    heroSubtitle?: string;
    primaryCtaText?: string;
    secondaryCtaText?: string;
    service1Title?: string;
    service1Description?: string;
    service1Feature1?: string;
    service1Feature2?: string;
    service1Feature3?: string;
    service1Feature4?: string;
    service1ImageUrl?: string | undefined;
    service2Title?: string;
    service2Description?: string;
    service2Feature1?: string;
    service2Feature2?: string;
    service2Feature3?: string;
    service2Feature4?: string;
    service2ImageUrl?: string | undefined;
    service3Title?: string;
    service3Description?: string;
    service3Feature1?: string;
    service3Feature2?: string;
    service3Feature3?: string;
    service3Feature4?: string;
    service3ImageUrl?: string | undefined;
    whyFeature1Title?: string;
    whyFeature1Description?: string;
    whyFeature2Title?: string;
    whyFeature2Description?: string;
    whyFeature3Title?: string;
    whyFeature3Description?: string;
    whyFeature4Title?: string;
    whyFeature4Description?: string;
    ctaTitle?: string;
    ctaSubtitle?: string;
    ctaButtonText?: string;
    logoUrl?: string | undefined;
    heroImageUrl?: string | undefined;
    updatedAt?: Date;
}

export class UpdateSiteSettingsDto implements IUpdateSiteSettingsDto {
    businessName?: string | undefined;
    tagline?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    mondayFridayHours?: string | undefined;
    saturdayHours?: string | undefined;
    sundayHours?: string | undefined;
    vehiclesServiced?: number | undefined;
    satisfactionRate?: number | undefined;
    yearsExperience?: number | undefined;
    heroTitle?: string | undefined;
    heroSubtitle?: string | undefined;
    primaryCtaText?: string | undefined;
    secondaryCtaText?: string | undefined;
    service1Title?: string | undefined;
    service1Description?: string | undefined;
    service1Feature1?: string | undefined;
    service1Feature2?: string | undefined;
    service1Feature3?: string | undefined;
    service1Feature4?: string | undefined;
    service1ImageUrl?: string | undefined;
    service2Title?: string | undefined;
    service2Description?: string | undefined;
    service2Feature1?: string | undefined;
    service2Feature2?: string | undefined;
    service2Feature3?: string | undefined;
    service2Feature4?: string | undefined;
    service2ImageUrl?: string | undefined;
    service3Title?: string | undefined;
    service3Description?: string | undefined;
    service3Feature1?: string | undefined;
    service3Feature2?: string | undefined;
    service3Feature3?: string | undefined;
    service3Feature4?: string | undefined;
    service3ImageUrl?: string | undefined;
    whyFeature1Title?: string | undefined;
    whyFeature1Description?: string | undefined;
    whyFeature2Title?: string | undefined;
    whyFeature2Description?: string | undefined;
    whyFeature3Title?: string | undefined;
    whyFeature3Description?: string | undefined;
    whyFeature4Title?: string | undefined;
    whyFeature4Description?: string | undefined;
    ctaTitle?: string | undefined;
    ctaSubtitle?: string | undefined;
    ctaButtonText?: string | undefined;
    logoUrl?: string | undefined;
    heroImageUrl?: string | undefined;

    constructor(data?: IUpdateSiteSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessName = _data["businessName"];
            this.tagline = _data["tagline"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.mondayFridayHours = _data["mondayFridayHours"];
            this.saturdayHours = _data["saturdayHours"];
            this.sundayHours = _data["sundayHours"];
            this.vehiclesServiced = _data["vehiclesServiced"];
            this.satisfactionRate = _data["satisfactionRate"];
            this.yearsExperience = _data["yearsExperience"];
            this.heroTitle = _data["heroTitle"];
            this.heroSubtitle = _data["heroSubtitle"];
            this.primaryCtaText = _data["primaryCtaText"];
            this.secondaryCtaText = _data["secondaryCtaText"];
            this.service1Title = _data["service1Title"];
            this.service1Description = _data["service1Description"];
            this.service1Feature1 = _data["service1Feature1"];
            this.service1Feature2 = _data["service1Feature2"];
            this.service1Feature3 = _data["service1Feature3"];
            this.service1Feature4 = _data["service1Feature4"];
            this.service1ImageUrl = _data["service1ImageUrl"];
            this.service2Title = _data["service2Title"];
            this.service2Description = _data["service2Description"];
            this.service2Feature1 = _data["service2Feature1"];
            this.service2Feature2 = _data["service2Feature2"];
            this.service2Feature3 = _data["service2Feature3"];
            this.service2Feature4 = _data["service2Feature4"];
            this.service2ImageUrl = _data["service2ImageUrl"];
            this.service3Title = _data["service3Title"];
            this.service3Description = _data["service3Description"];
            this.service3Feature1 = _data["service3Feature1"];
            this.service3Feature2 = _data["service3Feature2"];
            this.service3Feature3 = _data["service3Feature3"];
            this.service3Feature4 = _data["service3Feature4"];
            this.service3ImageUrl = _data["service3ImageUrl"];
            this.whyFeature1Title = _data["whyFeature1Title"];
            this.whyFeature1Description = _data["whyFeature1Description"];
            this.whyFeature2Title = _data["whyFeature2Title"];
            this.whyFeature2Description = _data["whyFeature2Description"];
            this.whyFeature3Title = _data["whyFeature3Title"];
            this.whyFeature3Description = _data["whyFeature3Description"];
            this.whyFeature4Title = _data["whyFeature4Title"];
            this.whyFeature4Description = _data["whyFeature4Description"];
            this.ctaTitle = _data["ctaTitle"];
            this.ctaSubtitle = _data["ctaSubtitle"];
            this.ctaButtonText = _data["ctaButtonText"];
            this.logoUrl = _data["logoUrl"];
            this.heroImageUrl = _data["heroImageUrl"];
        }
    }

    static fromJS(data: any): UpdateSiteSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSiteSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessName"] = this.businessName;
        data["tagline"] = this.tagline;
        data["address"] = this.address;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["mondayFridayHours"] = this.mondayFridayHours;
        data["saturdayHours"] = this.saturdayHours;
        data["sundayHours"] = this.sundayHours;
        data["vehiclesServiced"] = this.vehiclesServiced;
        data["satisfactionRate"] = this.satisfactionRate;
        data["yearsExperience"] = this.yearsExperience;
        data["heroTitle"] = this.heroTitle;
        data["heroSubtitle"] = this.heroSubtitle;
        data["primaryCtaText"] = this.primaryCtaText;
        data["secondaryCtaText"] = this.secondaryCtaText;
        data["service1Title"] = this.service1Title;
        data["service1Description"] = this.service1Description;
        data["service1Feature1"] = this.service1Feature1;
        data["service1Feature2"] = this.service1Feature2;
        data["service1Feature3"] = this.service1Feature3;
        data["service1Feature4"] = this.service1Feature4;
        data["service1ImageUrl"] = this.service1ImageUrl;
        data["service2Title"] = this.service2Title;
        data["service2Description"] = this.service2Description;
        data["service2Feature1"] = this.service2Feature1;
        data["service2Feature2"] = this.service2Feature2;
        data["service2Feature3"] = this.service2Feature3;
        data["service2Feature4"] = this.service2Feature4;
        data["service2ImageUrl"] = this.service2ImageUrl;
        data["service3Title"] = this.service3Title;
        data["service3Description"] = this.service3Description;
        data["service3Feature1"] = this.service3Feature1;
        data["service3Feature2"] = this.service3Feature2;
        data["service3Feature3"] = this.service3Feature3;
        data["service3Feature4"] = this.service3Feature4;
        data["service3ImageUrl"] = this.service3ImageUrl;
        data["whyFeature1Title"] = this.whyFeature1Title;
        data["whyFeature1Description"] = this.whyFeature1Description;
        data["whyFeature2Title"] = this.whyFeature2Title;
        data["whyFeature2Description"] = this.whyFeature2Description;
        data["whyFeature3Title"] = this.whyFeature3Title;
        data["whyFeature3Description"] = this.whyFeature3Description;
        data["whyFeature4Title"] = this.whyFeature4Title;
        data["whyFeature4Description"] = this.whyFeature4Description;
        data["ctaTitle"] = this.ctaTitle;
        data["ctaSubtitle"] = this.ctaSubtitle;
        data["ctaButtonText"] = this.ctaButtonText;
        data["logoUrl"] = this.logoUrl;
        data["heroImageUrl"] = this.heroImageUrl;
        return data;
    }
}

export interface IUpdateSiteSettingsDto {
    businessName?: string | undefined;
    tagline?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    mondayFridayHours?: string | undefined;
    saturdayHours?: string | undefined;
    sundayHours?: string | undefined;
    vehiclesServiced?: number | undefined;
    satisfactionRate?: number | undefined;
    yearsExperience?: number | undefined;
    heroTitle?: string | undefined;
    heroSubtitle?: string | undefined;
    primaryCtaText?: string | undefined;
    secondaryCtaText?: string | undefined;
    service1Title?: string | undefined;
    service1Description?: string | undefined;
    service1Feature1?: string | undefined;
    service1Feature2?: string | undefined;
    service1Feature3?: string | undefined;
    service1Feature4?: string | undefined;
    service1ImageUrl?: string | undefined;
    service2Title?: string | undefined;
    service2Description?: string | undefined;
    service2Feature1?: string | undefined;
    service2Feature2?: string | undefined;
    service2Feature3?: string | undefined;
    service2Feature4?: string | undefined;
    service2ImageUrl?: string | undefined;
    service3Title?: string | undefined;
    service3Description?: string | undefined;
    service3Feature1?: string | undefined;
    service3Feature2?: string | undefined;
    service3Feature3?: string | undefined;
    service3Feature4?: string | undefined;
    service3ImageUrl?: string | undefined;
    whyFeature1Title?: string | undefined;
    whyFeature1Description?: string | undefined;
    whyFeature2Title?: string | undefined;
    whyFeature2Description?: string | undefined;
    whyFeature3Title?: string | undefined;
    whyFeature3Description?: string | undefined;
    whyFeature4Title?: string | undefined;
    whyFeature4Description?: string | undefined;
    ctaTitle?: string | undefined;
    ctaSubtitle?: string | undefined;
    ctaButtonText?: string | undefined;
    logoUrl?: string | undefined;
    heroImageUrl?: string | undefined;
}

export class TenantSettingsDto implements ITenantSettingsDto {
    id?: number;
    name?: string;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;
    timeZone?: string;
    logoUrl?: string | undefined;
    primaryColor?: string | undefined;
    notifications?: NotificationSettingsDto;
    availabilityRules?: AvailabilityRulesDto | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: ITenantSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.businessAddress = _data["businessAddress"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.description = _data["description"];
            this.timeZone = _data["timeZone"];
            this.logoUrl = _data["logoUrl"];
            this.primaryColor = _data["primaryColor"];
            this.notifications = _data["notifications"] ? NotificationSettingsDto.fromJS(_data["notifications"]) : undefined as any;
            this.availabilityRules = _data["availabilityRules"] ? AvailabilityRulesDto.fromJS(_data["availabilityRules"]) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): TenantSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["businessAddress"] = this.businessAddress;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["website"] = this.website;
        data["description"] = this.description;
        data["timeZone"] = this.timeZone;
        data["logoUrl"] = this.logoUrl;
        data["primaryColor"] = this.primaryColor;
        data["notifications"] = this.notifications ? this.notifications.toJSON() : undefined as any;
        data["availabilityRules"] = this.availabilityRules ? this.availabilityRules.toJSON() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface ITenantSettingsDto {
    id?: number;
    name?: string;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;
    timeZone?: string;
    logoUrl?: string | undefined;
    primaryColor?: string | undefined;
    notifications?: NotificationSettingsDto;
    availabilityRules?: AvailabilityRulesDto | undefined;
    updatedAt?: Date | undefined;
}

export class NotificationSettingsDto implements INotificationSettingsDto {
    emailOnNewBooking?: boolean;
    emailOnCancellation?: boolean;
    emailOnPaymentReceived?: boolean;
    emailOnServiceComplete?: boolean;
    smsOnNewBooking?: boolean;
    smsOnCancellation?: boolean;
    smsOnPaymentReceived?: boolean;
    smsOnServiceComplete?: boolean;

    constructor(data?: INotificationSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailOnNewBooking = _data["emailOnNewBooking"];
            this.emailOnCancellation = _data["emailOnCancellation"];
            this.emailOnPaymentReceived = _data["emailOnPaymentReceived"];
            this.emailOnServiceComplete = _data["emailOnServiceComplete"];
            this.smsOnNewBooking = _data["smsOnNewBooking"];
            this.smsOnCancellation = _data["smsOnCancellation"];
            this.smsOnPaymentReceived = _data["smsOnPaymentReceived"];
            this.smsOnServiceComplete = _data["smsOnServiceComplete"];
        }
    }

    static fromJS(data: any): NotificationSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailOnNewBooking"] = this.emailOnNewBooking;
        data["emailOnCancellation"] = this.emailOnCancellation;
        data["emailOnPaymentReceived"] = this.emailOnPaymentReceived;
        data["emailOnServiceComplete"] = this.emailOnServiceComplete;
        data["smsOnNewBooking"] = this.smsOnNewBooking;
        data["smsOnCancellation"] = this.smsOnCancellation;
        data["smsOnPaymentReceived"] = this.smsOnPaymentReceived;
        data["smsOnServiceComplete"] = this.smsOnServiceComplete;
        return data;
    }
}

export interface INotificationSettingsDto {
    emailOnNewBooking?: boolean;
    emailOnCancellation?: boolean;
    emailOnPaymentReceived?: boolean;
    emailOnServiceComplete?: boolean;
    smsOnNewBooking?: boolean;
    smsOnCancellation?: boolean;
    smsOnPaymentReceived?: boolean;
    smsOnServiceComplete?: boolean;
}

export class AvailabilityRulesDto implements IAvailabilityRulesDto {
    weeklySchedule?: WeeklyScheduleDto;
    dateOverrides?: DateOverrideDto[];

    constructor(data?: IAvailabilityRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weeklySchedule = _data["weeklySchedule"] ? WeeklyScheduleDto.fromJS(_data["weeklySchedule"]) : undefined as any;
            if (Array.isArray(_data["dateOverrides"])) {
                this.dateOverrides = [] as any;
                for (let item of _data["dateOverrides"])
                    this.dateOverrides!.push(DateOverrideDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AvailabilityRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailabilityRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weeklySchedule"] = this.weeklySchedule ? this.weeklySchedule.toJSON() : undefined as any;
        if (Array.isArray(this.dateOverrides)) {
            data["dateOverrides"] = [];
            for (let item of this.dateOverrides)
                data["dateOverrides"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAvailabilityRulesDto {
    weeklySchedule?: WeeklyScheduleDto;
    dateOverrides?: DateOverrideDto[];
}

export class WeeklyScheduleDto implements IWeeklyScheduleDto {
    monday?: DayScheduleDto;
    tuesday?: DayScheduleDto;
    wednesday?: DayScheduleDto;
    thursday?: DayScheduleDto;
    friday?: DayScheduleDto;
    saturday?: DayScheduleDto;
    sunday?: DayScheduleDto;

    constructor(data?: IWeeklyScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.monday = _data["monday"] ? DayScheduleDto.fromJS(_data["monday"]) : undefined as any;
            this.tuesday = _data["tuesday"] ? DayScheduleDto.fromJS(_data["tuesday"]) : undefined as any;
            this.wednesday = _data["wednesday"] ? DayScheduleDto.fromJS(_data["wednesday"]) : undefined as any;
            this.thursday = _data["thursday"] ? DayScheduleDto.fromJS(_data["thursday"]) : undefined as any;
            this.friday = _data["friday"] ? DayScheduleDto.fromJS(_data["friday"]) : undefined as any;
            this.saturday = _data["saturday"] ? DayScheduleDto.fromJS(_data["saturday"]) : undefined as any;
            this.sunday = _data["sunday"] ? DayScheduleDto.fromJS(_data["sunday"]) : undefined as any;
        }
    }

    static fromJS(data: any): WeeklyScheduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monday"] = this.monday ? this.monday.toJSON() : undefined as any;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : undefined as any;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : undefined as any;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : undefined as any;
        data["friday"] = this.friday ? this.friday.toJSON() : undefined as any;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : undefined as any;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : undefined as any;
        return data;
    }
}

export interface IWeeklyScheduleDto {
    monday?: DayScheduleDto;
    tuesday?: DayScheduleDto;
    wednesday?: DayScheduleDto;
    thursday?: DayScheduleDto;
    friday?: DayScheduleDto;
    saturday?: DayScheduleDto;
    sunday?: DayScheduleDto;
}

export class DayScheduleDto implements IDayScheduleDto {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;

    constructor(data?: IDayScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isOpen = _data["isOpen"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
        }
    }

    static fromJS(data: any): DayScheduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new DayScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOpen"] = this.isOpen;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        return data;
    }
}

export interface IDayScheduleDto {
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
}

export class DateOverrideDto implements IDateOverrideDto {
    date?: Date;
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    reason?: string | undefined;

    constructor(data?: IDateOverrideDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : undefined as any;
            this.isOpen = _data["isOpen"];
            this.openTime = _data["openTime"];
            this.closeTime = _data["closeTime"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): DateOverrideDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateOverrideDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : undefined as any;
        data["isOpen"] = this.isOpen;
        data["openTime"] = this.openTime;
        data["closeTime"] = this.closeTime;
        data["reason"] = this.reason;
        return data;
    }
}

export interface IDateOverrideDto {
    date?: Date;
    isOpen?: boolean;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    reason?: string | undefined;
}

export class UpdateTenantSettingsDto implements IUpdateTenantSettingsDto {
    name?: string | undefined;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;
    timeZone?: string | undefined;
    logoUrl?: string | undefined;
    primaryColor?: string | undefined;
    notifications?: NotificationSettingsDto | undefined;
    availabilityRules?: AvailabilityRulesDto | undefined;

    constructor(data?: IUpdateTenantSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.businessAddress = _data["businessAddress"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.website = _data["website"];
            this.description = _data["description"];
            this.timeZone = _data["timeZone"];
            this.logoUrl = _data["logoUrl"];
            this.primaryColor = _data["primaryColor"];
            this.notifications = _data["notifications"] ? NotificationSettingsDto.fromJS(_data["notifications"]) : undefined as any;
            this.availabilityRules = _data["availabilityRules"] ? AvailabilityRulesDto.fromJS(_data["availabilityRules"]) : undefined as any;
        }
    }

    static fromJS(data: any): UpdateTenantSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTenantSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["businessAddress"] = this.businessAddress;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["website"] = this.website;
        data["description"] = this.description;
        data["timeZone"] = this.timeZone;
        data["logoUrl"] = this.logoUrl;
        data["primaryColor"] = this.primaryColor;
        data["notifications"] = this.notifications ? this.notifications.toJSON() : undefined as any;
        data["availabilityRules"] = this.availabilityRules ? this.availabilityRules.toJSON() : undefined as any;
        return data;
    }
}

export interface IUpdateTenantSettingsDto {
    name?: string | undefined;
    businessAddress?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    description?: string | undefined;
    timeZone?: string | undefined;
    logoUrl?: string | undefined;
    primaryColor?: string | undefined;
    notifications?: NotificationSettingsDto | undefined;
    availabilityRules?: AvailabilityRulesDto | undefined;
}

export class CreateVehicleDto implements ICreateVehicleDto {
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;

    constructor(data?: ICreateVehicleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.make = _data["make"];
            this.model = _data["model"];
            this.year = _data["year"];
            this.vin = _data["vin"];
            this.licensePlate = _data["licensePlate"];
            this.color = _data["color"];
            this.mileage = _data["mileage"];
        }
    }

    static fromJS(data: any): CreateVehicleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["make"] = this.make;
        data["model"] = this.model;
        data["year"] = this.year;
        data["vin"] = this.vin;
        data["licensePlate"] = this.licensePlate;
        data["color"] = this.color;
        data["mileage"] = this.mileage;
        return data;
    }
}

export interface ICreateVehicleDto {
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;
}

export class UpdateVehicleDto implements IUpdateVehicleDto {
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;

    constructor(data?: IUpdateVehicleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.make = _data["make"];
            this.model = _data["model"];
            this.year = _data["year"];
            this.vin = _data["vin"];
            this.licensePlate = _data["licensePlate"];
            this.color = _data["color"];
            this.mileage = _data["mileage"];
        }
    }

    static fromJS(data: any): UpdateVehicleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateVehicleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["make"] = this.make;
        data["model"] = this.model;
        data["year"] = this.year;
        data["vin"] = this.vin;
        data["licensePlate"] = this.licensePlate;
        data["color"] = this.color;
        data["mileage"] = this.mileage;
        return data;
    }
}

export interface IUpdateVehicleDto {
    customerId?: number;
    make?: string;
    model?: string;
    year?: number;
    vin?: string | undefined;
    licensePlate?: string | undefined;
    color?: string | undefined;
    mileage?: number | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}