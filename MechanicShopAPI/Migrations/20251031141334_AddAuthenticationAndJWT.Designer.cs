// <auto-generated />
using System;
using MechanicShopAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MechanicShopAPI.Migrations
{
    [DbContext(typeof(MechanicShopContext))]
    [Migration("20251031141334_AddAuthenticationAndJWT")]
    partial class AddAuthenticationAndJWT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MechanicShopAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StaffId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedStaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "ScheduledDate");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsRevoked");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.RepairOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ActualLaborCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("ActualLaborHours")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ActualPartsCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedTechnicianId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("CustomerApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CustomerApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSignature")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedLaborCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("EstimatedLaborHours")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EstimatedPartsCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text");

                    b.Property<int?>("MileageIn")
                        .HasColumnType("integer");

                    b.Property<int?>("MileageOut")
                        .HasColumnType("integer");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicianNotes")
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "OrderNumber")
                        .IsUnique();

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("RepairOrders");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.ServiceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LaborCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("MileageAtService")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("PartsCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("PerformedByStaffId")
                        .HasColumnType("integer");

                    b.Property<int?>("RepairOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TechnicianName")
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByStaffId");

                    b.HasIndex("RepairOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "ServiceDate");

                    b.ToTable("ServiceRecords");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.SiteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CtaButtonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CtaSubtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CtaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HeroImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("HeroSubtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("MondayFridayHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PrimaryCtaText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SatisfactionRate")
                        .HasColumnType("integer");

                    b.Property<string>("SaturdayHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondaryCtaText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1Feature1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1Feature2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1Feature3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1Feature4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service1ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Service1Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2Feature1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2Feature2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2Feature3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2Feature4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service2ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Service2Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3Feature1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3Feature2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3Feature3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3Feature4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service3ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Service3Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SundayHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VehiclesServiced")
                        .HasColumnType("integer");

                    b.Property<string>("WhyFeature1Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature1Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature2Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature2Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature3Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature3Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature4Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhyFeature4Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Auto Street",
                            BusinessName = "Precision Automotive",
                            City = "City",
                            CtaButtonText = "Book Appointment",
                            CtaSubtitle = "Schedule your service appointment today",
                            CtaTitle = "Ready to Get Started?",
                            Email = "info@mechanic.com",
                            HeroSubtitle = "Expert Service for Your Vehicle",
                            HeroTitle = "PRECISION\nAUTOMOTIVE\nCARE",
                            MondayFridayHours = "8am - 6pm",
                            Phone = "(555) 123-4567",
                            PrimaryCtaText = "Schedule Service",
                            SatisfactionRate = 98,
                            SaturdayHours = "9am - 4pm",
                            SecondaryCtaText = "Our Services",
                            Service1Description = "Oil changes, filter replacements, fluid checks, and comprehensive inspections to keep your vehicle running smoothly.",
                            Service1Feature1 = "Oil & Filter Change",
                            Service1Feature2 = "Brake Inspection",
                            Service1Feature3 = "Tire Rotation",
                            Service1Feature4 = "Fluid Top-ups",
                            Service1Title = "Routine Maintenance",
                            Service2Description = "Advanced diagnostic tools and expert technicians to identify and resolve any mechanical or electrical issues.",
                            Service2Feature1 = "Computer Diagnostics",
                            Service2Feature2 = "Engine Repair",
                            Service2Feature3 = "Transmission Service",
                            Service2Feature4 = "Electrical Systems",
                            Service2Title = "Diagnostics & Repair",
                            Service3Description = "Enhance your vehicle's performance with professional tuning, upgrades, and custom modifications.",
                            Service3Feature1 = "Engine Tuning",
                            Service3Feature2 = "Suspension Upgrades",
                            Service3Feature3 = "Exhaust Systems",
                            Service3Feature4 = "Brake Upgrades",
                            Service3Title = "Performance Upgrades",
                            State = "State",
                            SundayHours = "Closed",
                            Tagline = "Expert Service for Your Vehicle",
                            UpdatedAt = new DateTime(2025, 10, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehiclesServiced = 5000,
                            WhyFeature1Description = "ASE-certified mechanics with decades of combined experience",
                            WhyFeature1Title = "Expert Technicians",
                            WhyFeature2Description = "We use only OEM and premium aftermarket parts",
                            WhyFeature2Title = "Quality Parts",
                            WhyFeature3Description = "No hidden fees, detailed estimates before any work begins",
                            WhyFeature3Title = "Transparent Pricing",
                            WhyFeature4Description = "All services backed by our comprehensive warranty",
                            WhyFeature4Title = "Warranty Coverage",
                            YearsExperience = 25,
                            ZipCode = "12345"
                        });
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificationNumbers")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specializations")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.HasIndex("TenantId", "Role");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessAddress")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IntegrationSettings")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<int>("MaxCustomers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVehicles")
                        .HasColumnType("integer");

                    b.Property<string>("MediaStoragePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("StorageLimitBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("StorageUsedBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubscriptionEndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TrialEndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Plan");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessAddress = "123 Main Street",
                            City = "Springfield",
                            Country = "US",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@precision-auto.com",
                            MaxCustomers = 1000,
                            MaxUsers = 10,
                            MaxVehicles = 2000,
                            MediaStoragePath = "/tenants/precision-auto/media",
                            Name = "Precision Automotive",
                            Phone = "(555) 123-4567",
                            Plan = 2,
                            Slug = "precision-auto",
                            State = "IL",
                            Status = 0,
                            StorageLimitBytes = 5368709120L,
                            StorageUsedBytes = 0L,
                            ZipCode = "62701"
                        },
                        new
                        {
                            Id = 2,
                            BusinessAddress = "456 Industrial Blvd",
                            City = "Chicago",
                            Country = "US",
                            CreatedAt = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "info@acme-motors.com",
                            MaxCustomers = 500,
                            MaxUsers = 5,
                            MaxVehicles = 1000,
                            MediaStoragePath = "/tenants/acme-motors/media",
                            Name = "ACME Motors & Repair",
                            Phone = "(555) 987-6543",
                            Plan = 1,
                            Slug = "acme-motors",
                            State = "IL",
                            Status = 0,
                            StorageLimitBytes = 5368709120L,
                            StorageUsedBytes = 0L,
                            ZipCode = "60601"
                        },
                        new
                        {
                            Id = 3,
                            BusinessAddress = "789 Speedway Drive",
                            City = "Indianapolis",
                            Country = "US",
                            CreatedAt = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "service@speedway.com",
                            MaxCustomers = 10000,
                            MaxUsers = 50,
                            MaxVehicles = 20000,
                            MediaStoragePath = "/tenants/speedway-service/media",
                            Name = "Speedway Service Center",
                            Phone = "(555) 555-0123",
                            Plan = 3,
                            Slug = "speedway-service",
                            State = "IN",
                            Status = 0,
                            StorageLimitBytes = 5368709120L,
                            StorageUsedBytes = 0L,
                            ZipCode = "46204"
                        });
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("VIN")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MechanicShopAPI.Models.ApplicationUser", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Appointment", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Staff", "AssignedStaff")
                        .WithMany("AssignedAppointments")
                        .HasForeignKey("AssignedStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechanicShopAPI.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("Appointments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Vehicle", "Vehicle")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedStaff");

                    b.Navigation("Customer");

                    b.Navigation("Tenant");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Customer", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("Customers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.RepairOrder", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Appointment", "Appointment")
                        .WithMany("RepairOrders")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechanicShopAPI.Models.Staff", "AssignedTechnician")
                        .WithMany("AssignedRepairOrders")
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechanicShopAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("RepairOrders")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("AssignedTechnician");

                    b.Navigation("Customer");

                    b.Navigation("Tenant");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.ServiceRecord", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Staff", "PerformedByStaff")
                        .WithMany()
                        .HasForeignKey("PerformedByStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechanicShopAPI.Models.RepairOrder", "RepairOrder")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Vehicle", "Vehicle")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByStaff");

                    b.Navigation("RepairOrder");

                    b.Navigation("Tenant");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Staff", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("Staff")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Vehicle", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.Tenant", "Tenant")
                        .WithMany("Vehicles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MechanicShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MechanicShopAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MechanicShopAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Appointment", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.RepairOrder", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Staff", b =>
                {
                    b.Navigation("AssignedAppointments");

                    b.Navigation("AssignedRepairOrders");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Tenant", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("RepairOrders");

                    b.Navigation("ServiceRecords");

                    b.Navigation("Staff");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MechanicShopAPI.Models.Vehicle", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ServiceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
